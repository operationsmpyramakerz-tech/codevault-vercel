{"file_contents":{"index.js":{"content":"const express = require(\"express\");\nconst path = require(\"path\");\nconst session = require(\"express-session\");\nconst { Client } = require(\"@notionhq/client\");\nconst PDFDocument = require(\"pdfkit\"); // PDF\n\nconst app = express();\nconst PORT = process.env.PORT || 5000;\n\n// Initialize Notion Client using Replit Secrets\nconst notion = new Client({ auth: process.env.Notion_API_Key });\nconst componentsDatabaseId = process.env.Products_Database;\nconst ordersDatabaseId = process.env.Products_list;\nconst teamMembersDatabaseId = process.env.Team_Members;\nconst stocktakingDatabaseId = process.env.School_Stocktaking_DB_ID;\nconst fundsDatabaseId = process.env.Funds;\n\n// Middleware\napp.use(express.json({ limit: '10mb' })); // Increase limit for file uploads\napp.use(express.urlencoded({ extended: true }));\napp.use(express.static(\"public\"));\n\napp.use(\n  session({\n    secret: process.env.SESSION_SECRET || \"a-very-secret-key-for-development\",\n    resave: false,\n    saveUninitialized: false,\n    cookie: { secure: false },\n  }),\n);\n\n// Helpers: Allowed pages control\n// نخزن داخليًا Requested Orders كموحّد للصفحة، ونضيف صفحة جديدة Assigned Schools Requested Orders\nconst ALL_PAGES = [\n  \"Current Orders\",\n  \"Requested Orders\",\n  \"Assigned Schools Requested Orders\",\n  \"Create New Order\",\n  \"Stocktaking\",\n  \"Funds\",\n];\n\nconst norm = (s) => String(s || \"\").trim().toLowerCase();\nconst normKey = (s) => String(s || \"\").toLowerCase().replace(/[^a-z0-9]/gi, \"\");\n\n// توحيد الأسماء القادمة من Notion\nfunction normalizePages(names = []) {\n  const set = new Set(names.map((n) => norm(n)));\n  const out = [];\n  if (set.has(\"current orders\")) out.push(\"Current Orders\");\n\n  // اعتبر الاسمين نفس الصفحة داخليًا\n  if (set.has(\"requested orders\") || set.has(\"schools requested orders\")) {\n    out.push(\"Requested Orders\");\n  }\n\n  // الصفحة الجديدة (بعض المرادفات الاختيارية)\n  if (\n    set.has(\"assigned schools requested orders\") ||\n    set.has(\"assigned requested orders\") ||\n    set.has(\"assigned orders\") ||\n    set.has(\"my assigned orders\")\n  ) {\n    out.push(\"Assigned Schools Requested Orders\");\n  }\n\n  if (set.has(\"create new order\")) out.push(\"Create New Order\");\n  if (set.has(\"stocktaking\")) out.push(\"Stocktaking\");\n  if (set.has(\"funds\")) out.push(\"Funds\");\n  return out;\n}\n\n// توسيع الأسماء للواجهة حتى لا يحصل تضارب aliases\nfunction expandAllowedForUI(list = []) {\n  const set = new Set((list || []).map((s) => String(s)));\n  if (set.has(\"Requested Orders\") || set.has(\"Schools Requested Orders\")) {\n    set.add(\"Requested Orders\");\n    set.add(\"Schools Requested Orders\");\n  }\n  if (set.has(\"Assigned Schools Requested Orders\")) {\n    set.add(\"Assigned Schools Requested Orders\");\n  }\n  if (set.has(\"Funds\")) {\n    set.add(\"Funds\");\n  }\n  return Array.from(set);\n}\n\nfunction extractAllowedPages(props = {}) {\n  // Try known property names first (case-sensitive)\n  let candidates =\n    props.Pages?.multi_select ||\n    props[\"Allowed Pages\"]?.multi_select ||\n    props[\"Allowed pages\"]?.multi_select || // support lowercase 'p'\n    props[\"Pages Allowed\"]?.multi_select ||\n    props[\"Access Pages\"]?.multi_select ||\n    [];\n\n  // If still empty, look for any multi_select prop whose name matches /allowed.*pages|pages.*allowed/i\n  if (!Array.isArray(candidates) || candidates.length === 0) {\n    for (const [key, val] of Object.entries(props || {})) {\n      if (val && val.type === \"multi_select\" && /allowed.*pages|pages.*allowed/i.test(String(key))) {\n        candidates = val.multi_select || [];\n        break;\n      }\n    }\n  }\n\n  const names = Array.isArray(candidates)\n    ? candidates.map((x) => x?.name).filter(Boolean)\n    : [];\n  const allowed = normalizePages(names);\nreturn allowed; // لو فاضي يبقى مفيش صفحات\n}\n\nfunction firstAllowedPath(allowed = []) {\n  if (allowed.includes(\"Current Orders\")) return \"/orders\";\n  if (allowed.includes(\"Requested Orders\")) return \"/orders/requested\";\n  if (allowed.includes(\"Assigned Schools Requested Orders\")) return \"/orders/assigned\";\n  if (allowed.includes(\"Create New Order\")) return \"/orders/new\";\n  if (allowed.includes(\"Stocktaking\")) return \"/stocktaking\";\n  if (allowed.includes(\"Funds\")) return \"/funds\";\n  return \"/login\";\n}\n\n// Helpers — Notion\nasync function getCurrentUserPageId(username) {\n  const userQuery = await notion.databases.query({\n    database_id: teamMembersDatabaseId,\n    filter: { property: \"Name\", title: { equals: username } },\n  });\n  if (userQuery.results.length === 0) return null;\n  return userQuery.results[0].id;\n}\n\nasync function getOrdersDBProps() {\n  const db = await notion.databases.retrieve({ database_id: ordersDatabaseId });\n  return db.properties || {};\n}\n\nfunction pickPropName(propsObj, aliases = []) {\n  const keys = Object.keys(propsObj || {});\n  for (const k of keys) {\n    if (aliases.some((a) => normKey(a) === normKey(k))) return k;\n  }\n  return null;\n}\n\n// نلقى اسم خاصية Assigned To من الـ DB Properties\nasync function detectAssignedPropName() {\n  const props = await getOrdersDBProps();\n  return (\n    pickPropName(props, [\n      \"Assigned To\",\n      \"assigned to\",\n      \"ِAssigned To\",\n      \"Assigned_to\",\n      \"AssignedTo\",\n    ]) || \"Assigned To\"\n  );\n}\n\n// خاصية الكمية المتاحة في المخزن\nasync function detectAvailableQtyPropName() {\n  const props = await getOrdersDBProps();\n  return (\n    pickPropName(props, [\n      \"Available Quantity\",\n      \"Available Qty\",\n      \"In Stock Qty\",\n      \"Qty Available\",\n      \"Stock Available\",\n    ]) || null\n  );\n}\n\n// خاصية Status (select) — لاستخدام زر Mark prepared\nasync function detectStatusPropName() {\n  const props = await getOrdersDBProps();\n  return (\n    pickPropName(props, [\n      \"Status\",\n      \"Order Status\",\n      \"Preparation Status\",\n      \"Prepared Status\",\n      \"state\",\n    ]) || \"Status\"\n  );\n}\n\n// Authentication middleware\nfunction requireAuth(req, res, next) {\n  if (req.session && req.session.authenticated) return next();\n  return res.redirect(\"/login\");\n}\n\n// Page-Access middleware\nfunction requirePage(pageName) {\n  return (req, res, next) => {\n    const allowed = req.session?.allowedPages || ALL_PAGES;\n    if (allowed.includes(pageName)) return next();\n    return res.redirect(firstAllowedPath(allowed));\n  };\n}\n\n// --- Page Serving Routes ---\napp.get(\"/login\", (req, res) => {\n  if (req.session.authenticated)\n    return res.redirect(firstAllowedPath(req.session.allowedPages || ALL_PAGES));\n  res.sendFile(path.join(__dirname, \"public\", \"login.html\"));\n});\n\napp.get(\"/\", (req, res) => {\n  if (req.session.authenticated)\n    return res.redirect(firstAllowedPath(req.session.allowedPages || ALL_PAGES));\n  res.sendFile(path.join(__dirname, \"public\", \"login.html\"));\n});\n\napp.get(\"/dashboard\", requireAuth, (req, res) => {\n  res.redirect(firstAllowedPath(req.session.allowedPages || ALL_PAGES));\n});\n\napp.get(\"/orders\", requireAuth, requirePage(\"Current Orders\"), (req, res) => {\n  res.sendFile(path.join(__dirname, \"public\", \"index.html\"));\n});\n\napp.get(\n  \"/orders/requested\",\n  requireAuth,\n  requirePage(\"Requested Orders\"),\n  (req, res) => {\n    res.sendFile(path.join(__dirname, \"public\", \"requested-orders.html\"));\n  },\n);\n\n// صفحة جديدة: الطلبات المُسندة للمستخدم الحالي فقط\napp.get(\n  \"/orders/assigned\",\n  requireAuth,\n  requirePage(\"Assigned Schools Requested Orders\"),\n  (req, res) => {\n    res.sendFile(path.join(__dirname, \"public\", \"assigned-orders.html\"));\n  },\n);\n\n// 3-step order pages\napp.get(\n  \"/orders/new\",\n  requireAuth,\n  requirePage(\"Create New Order\"),\n  (req, res) => {\n    res.sendFile(path.join(__dirname, \"public\", \"create-order-details.html\"));\n  },\n);\napp.get(\n  \"/orders/new/products\",\n  requireAuth,\n  requirePage(\"Create New Order\"),\n  (req, res) => {\n    if (!req.session.orderDraft || !req.session.orderDraft.reason) {\n      return res.redirect(\"/orders/new\");\n    }\n    res.sendFile(path.join(__dirname, \"public\", \"create-order-products.html\"));\n  },\n);\napp.get(\n  \"/orders/new/review\",\n  requireAuth,\n  requirePage(\"Create New Order\"),\n  (req, res) => {\n    const d = req.session.orderDraft || {};\n    if (!d.reason) return res.redirect(\"/orders/new\");\n    if (!Array.isArray(d.products) || d.products.length === 0) {\n      return res.redirect(\"/orders/new/products\");\n    }\n    res.sendFile(path.join(__dirname, \"public\", \"create-order-review.html\"));\n  },\n);\n\napp.get(\"/stocktaking\", requireAuth, requirePage(\"Stocktaking\"), (req, res) => {\n  res.sendFile(path.join(__dirname, \"public\", \"stocktaking.html\"));\n});\n\n// Account page\napp.get(\"/account\", requireAuth, (req, res) => {\n  res.sendFile(path.join(__dirname, \"public\", \"account.html\"));\n});\n\n// Funds page\napp.get(\"/funds\", requireAuth, requirePage(\"Funds\"), (req, res) => {\n  res.sendFile(path.join(__dirname, \"public\", \"funds.html\"));\n});\n\n// --- API Routes ---\n\n// Login\napp.post(\"/api/login\", async (req, res) => {\n  const { username, password } = req.body;\n  if (!teamMembersDatabaseId) {\n    return res\n      .status(500)\n      .json({ error: \"Team_Members database ID is not configured.\" });\n  }\n  try {\n    const response = await notion.databases.query({\n      database_id: teamMembersDatabaseId,\n      filter: { property: \"Name\", title: { equals: username } },\n    });\n    if (response.results.length === 0) {\n      return res.status(401).json({ error: \"Invalid username or password\" });\n    }\n    const user = response.results[0];\n    const storedPassword = user.properties.Password?.number;\n\n    if (storedPassword && storedPassword.toString() === password) {\n      const allowedNormalized = extractAllowedPages(user.properties);\n      req.session.authenticated = true;\n      req.session.username = username;\n      req.session.allowedPages = allowedNormalized;\n\n      const allowedUI = expandAllowedForUI(allowedNormalized);\n\n      req.session.save((err) => {\n        if (err)\n          return res.status(500).json({ error: \"Session could not be saved.\" });\n        res.json({\n          success: true,\n          message: \"Login successful\",\n          allowedPages: allowedUI,\n        });\n      });\n    } else {\n      res.status(401).json({ error: \"Invalid username or password\" });\n    }\n  } catch (error) {\n    console.error(\"Login error:\", error);\n    res.status(500).json({ error: \"Login failed\" });\n  }\n});\n\n// Logout\napp.post(\"/api/logout\", (req, res) => {\n  req.session.destroy((err) => {\n    if (err)\n      return res\n        .status(500)\n        .json({ success: false, message: \"Could not log out.\" });\n    res.clearCookie(\"connect.sid\");\n    res.json({ success: true });\n  });\n});\n\n// Account info (returns fresh allowedPages)\napp.get(\"/api/account\", requireAuth, async (req, res) => {\n  if (!teamMembersDatabaseId) {\n    return res\n      .status(500)\n      .json({ error: \"Team_Members database ID is not configured.\" });\n  }\n  try {\n    const response = await notion.databases.query({\n      database_id: teamMembersDatabaseId,\n      filter: { property: \"Name\", title: { equals: req.session.username } },\n    });\n\n    if (response.results.length === 0) {\n      return res.status(404).json({ error: \"User not found.\" });\n    }\n\n    const user = response.results[0];\n    const p = user.properties;\n\n    const freshAllowed = extractAllowedPages(p);\n    req.session.allowedPages = freshAllowed;\n    const allowedUI = expandAllowedForUI(freshAllowed);\n\n    const data = {\n      name: p?.Name?.title?.[0]?.plain_text || \"\",\n      username: req.session.username || \"\",\n      department: p?.Department?.select?.name || \"\",\n      position: p?.Position?.select?.name || \"\",\n      phone: p?.Phone?.phone_number || \"\",\n      email: p?.Email?.email || \"\",\n      employeeCode: p?.[\"Employee Code\"]?.number ?? null,\n      password: p?.Password?.number ?? null,\n      allowedPages: allowedUI,\n    };\n\n    res.set(\"Cache-Control\", \"no-store\");\n    res.json(data);\n  } catch (error) {\n    console.error(\"Error fetching account from Notion:\", error.body || error);\n    res.status(500).json({ error: \"Failed to fetch account info.\" });\n  }\n});\n\n// Order Draft APIs — require Create New Order\napp.get(\n  \"/api/order-draft\",\n  requireAuth,\n  requirePage(\"Create New Order\"),\n  (req, res) => {\n    res.json(req.session.orderDraft || {});\n  },\n);\napp.post(\n  \"/api/order-draft/details\",\n  requireAuth,\n  requirePage(\"Create New Order\"),\n  (req, res) => {\n    const { reason } = req.body;\n    if (!reason || !reason.trim()) {\n      return res.status(400).json({ error: \"Reason is required.\" });\n    }\n    req.session.orderDraft = req.session.orderDraft || {};\n    req.session.orderDraft.reason = reason.trim();\n    return res.json({ ok: true });\n  },\n);\napp.post(\n  \"/api/order-draft/products\",\n  requireAuth,\n  requirePage(\"Create New Order\"),\n  (req, res) => {\n    const { products } = req.body;\n    if (!Array.isArray(products) || products.length === 0) {\n      return res.status(400).json({ error: \"No products provided.\" });\n    }\n    const clean = products\n      .map((p) => ({\n        id: String(p.id),\n        quantity: Number(p.quantity) || 0,\n      }))\n      .filter((p) => p.id && p.quantity > 0);\n\n    if (clean.length === 0) {\n      return res\n        .status(400)\n        .json({ error: \"No valid products after sanitization.\" });\n    }\n    req.session.orderDraft = req.session.orderDraft || {};\n    req.session.orderDraft.products = clean;\n    return res.json({ ok: true, count: clean.length });\n  },\n);\napp.delete(\n  \"/api/order-draft\",\n  requireAuth,\n  requirePage(\"Create New Order\"),\n  (req, res) => {\n    delete req.session.orderDraft;\n    return res.json({ ok: true });\n  },\n);\n\n// Orders listing (Current Orders)\napp.get(\n  \"/api/orders\",\n  requireAuth,\n  requirePage(\"Current Orders\"),\n  async (req, res) => {\n    if (!ordersDatabaseId || !teamMembersDatabaseId) {\n      return res\n        .status(500)\n        .json({ error: \"Database IDs are not configured.\" });\n    }\n\n    res.set(\"Cache-Control\", \"no-store\");\n\n    try {\n      const userQuery = await notion.databases.query({\n        database_id: teamMembersDatabaseId,\n        filter: { property: \"Name\", title: { equals: req.session.username } },\n      });\n      if (userQuery.results.length === 0) {\n        return res.status(404).json({ error: \"User not found.\" });\n      }\n      const userId = userQuery.results[0].id;\n\n      const allOrders = [];\n      let hasMore = true;\n      let startCursor = undefined;\n\n      while (hasMore) {\n        const response = await notion.databases.query({\n          database_id: ordersDatabaseId,\n          start_cursor: startCursor,\n          filter: { property: \"Teams Members\", relation: { contains: userId } },\n          sorts: [{ timestamp: \"created_time\", direction: \"descending\" }],\n        });\n\n        for (const page of response.results) {\n          const productRelation = page.properties.Product?.relation;\n          let productName = \"Unknown Product\";\n          if (productRelation && productRelation.length > 0) {\n            try {\n              const productPage = await notion.pages.retrieve({\n                page_id: productRelation[0].id,\n              });\n              productName =\n                productPage.properties?.Name?.title?.[0]?.plain_text ||\n                \"Unknown Product\";\n            } catch (e) {\n              console.error(\n                \"Could not retrieve related product page:\",\n                e.body || e.message,\n              );\n            }\n          }\n\n          allOrders.push({\n            id: page.id,\n            reason:\n              page.properties?.Reason?.title?.[0]?.plain_text || \"No Reason\",\n            productName,\n            quantity: page.properties?.[\"Quantity Requested\"]?.number || 0,\n            status:\n              page.properties?.[\"Status\"]?.select?.name || \"Pending\",\n            createdTime: page.created_time,\n          });\n        }\n\n        hasMore = response.has_more;\n        startCursor = response.next_cursor;\n      }\n\n      const TTL_MS = 10 * 60 * 1000;\n      let recent = Array.isArray(req.session.recentOrders)\n        ? req.session.recentOrders\n        : [];\n      recent = recent.filter(\n        (r) => Date.now() - new Date(r.createdTime).getTime() < TTL_MS,\n      );\n\n      const ids = new Set(allOrders.map((o) => o.id));\n      const extras = recent.filter((r) => !ids.has(r.id));\n      const merged = allOrders\n        .concat(extras)\n        .sort((a, b) => new Date(b.createdTime) - new Date(a.createdTime));\n\n      req.session.recentOrders = recent;\n\n      res.json(merged);\n    } catch (error) {\n      console.error(\"Error fetching orders from Notion:\", error.body || error);\n      res.status(500).json({ error: \"Failed to fetch orders from Notion.\" });\n    }\n  },\n);\n\n// Team members (for assignment) — requires Requested Orders\napp.get(\n  \"/api/team-members\",\n  requireAuth,\n  requirePage(\"Requested Orders\"),\n  async (req, res) => {\n    try {\n      const result = await notion.databases.query({\n        database_id: teamMembersDatabaseId,\n        sorts: [{ property: \"Name\", direction: \"ascending\" }],\n      });\n      const items = result.results.map((p) => ({\n        id: p.id,\n        name: p.properties?.Name?.title?.[0]?.plain_text || \"Unnamed\",\n      }));\n      res.json(items);\n    } catch (e) {\n      console.error(e);\n      res.status(500).json({ error: \"Failed to load team members\" });\n    }\n  },\n);\n\n// Requested orders for all users — requires Requested Orders\napp.get(\n  \"/api/orders/requested\",\n  requireAuth,\n  requirePage(\"Requested Orders\"),\n  async (req, res) => {\n    if (!ordersDatabaseId)\n      return res.status(500).json({ error: \"Orders DB not configured\" });\n    try {\n      const all = [];\n      let hasMore = true,\n        startCursor;\n\n      const nameCache = new Map();\n      async function memberName(id) {\n        if (!id) return \"\";\n        if (nameCache.has(id)) return nameCache.get(id);\n        try {\n          const page = await notion.pages.retrieve({ page_id: id });\n          const nm = page.properties?.Name?.title?.[0]?.plain_text || \"\";\n          nameCache.set(id, nm);\n          return nm;\n        } catch {\n          return \"\";\n        }\n      }\n\n      const findAssignedProp = (props) => {\n        const cand = [\n          \"Assigned To\",\n          \"assigned to\",\n          \"ِAssigned To\",\n          \"Assigned_to\",\n          \"AssignedTo\",\n        ];\n        const keys = Object.keys(props || {});\n        for (const k of keys) {\n          if (cand.some((c) => normKey(c) === normKey(k))) return k;\n        }\n        return \"Assigned To\";\n      };\n\n      while (hasMore) {\n        const resp = await notion.databases.query({\n          database_id: ordersDatabaseId,\n          start_cursor: startCursor,\n          sorts: [{ timestamp: \"created_time\", direction: \"descending\" }],\n        });\n\n        for (const page of resp.results) {\n          const props = page.properties || {};\n\n          // Product name\n          let productName = \"Unknown Product\";\n          const productRel = props.Product?.relation;\n          if (Array.isArray(productRel) && productRel.length) {\n            try {\n              const productPage = await notion.pages.retrieve({\n                page_id: productRel[0].id,\n              });\n              productName =\n                productPage.properties?.Name?.title?.[0]?.plain_text ||\n                productName;\n            } catch {}\n          }\n\n          const reason = props.Reason?.title?.[0]?.plain_text || \"No Reason\";\n          const qty = props[\"Quantity Requested\"]?.number || 0;\n          const status = props[\"Status\"]?.select?.name || \"Pending\";\n          const createdTime = page.created_time;\n\n          // Created by (Teams Members relation)\n          let createdById = \"\";\n          let createdByName = \"\";\n          const teamRel = props[\"Teams Members\"]?.relation;\n          if (Array.isArray(teamRel) && teamRel.length) {\n            createdById = teamRel[0].id;\n            createdByName = await memberName(createdById);\n          }\n\n          // Assigned To\n          const assignedKey = findAssignedProp(props);\n          let assignedToId = \"\";\n          let assignedToName = \"\";\n          const assignedRel = props[assignedKey]?.relation;\n          if (Array.isArray(assignedRel) && assignedRel.length) {\n            assignedToId = assignedRel[0].id;\n            assignedToName = await memberName(assignedToId);\n          }\n\n          all.push({\n            id: page.id,\n            reason,\n            productName,\n            quantity: qty,\n            status,\n            createdTime,\n            createdById,\n            createdByName,\n            assignedToId,\n            assignedToName,\n          });\n        }\n\n        hasMore = resp.has_more;\n        startCursor = resp.next_cursor;\n      }\n\n      res.json(all);\n    } catch (e) {\n      console.error(e);\n      res.status(500).json({ error: \"Failed to fetch requested orders\" });\n    }\n  },\n);\n\n// Assign member to multiple order items — requires Requested Orders\napp.post(\n  \"/api/orders/assign\",\n  requireAuth,\n  requirePage(\"Requested Orders\"),\n  async (req, res) => {\n    try {\n      let { orderIds, memberIds, memberId } = req.body || {};\n      if (!Array.isArray(orderIds) || !orderIds.length) {\n        return res.status(400).json({ error: \"orderIds required\" });\n      }\n      if ((!Array.isArray(memberIds) || memberIds.length === 0) && !memberId)\n        return res.status(400).json({ error: \"memberIds or memberId required\" });\n      if (!Array.isArray(memberIds) || memberIds.length === 0) memberIds = memberId ? [memberId] : [];\n\n      // Detect property name \"Assigned To\"\n      const sample = await notion.pages.retrieve({ page_id: orderIds[0] });\n      const props = sample.properties || {};\n      const candidates = [\n        \"Assigned To\",\n        \"assigned to\",\n        \"ِAssigned To\",\n        \"Assigned_to\",\n        \"AssignedTo\",\n      ];\n      let assignedProp = \"Assigned To\";\n      for (const k of Object.keys(props)) {\n        if (candidates.some((c) => normKey(c) === normKey(k))) {\n          assignedProp = k;\n          break;\n        }\n      }\n\n      await Promise.all(\n        orderIds.map((id) =>\n          notion.pages.update({\n            page_id: id,\n            properties: { [assignedProp]: { relation: (memberIds || []).map(id => ({ id })) } },\n          }),\n        ),\n      );\n\n      res.json({ success: true });\n    } catch (e) {\n      console.error(\"Assign error:\", e.body || e);\n      res.status(500).json({ error: \"Failed to assign member\" });\n    }\n  },\n);\n\n// ========== Assigned: APIs ==========\n// 1) جلب الطلبات المسندة للمستخدم الحالي — مع reason + status\napp.get(\n  \"/api/orders/assigned\",\n  requireAuth,\n  requirePage(\"Assigned Schools Requested Orders\"),\n  async (req, res) => {\n    try {\n      const userId = await getCurrentUserPageId(req.session.username);\n      if (!userId) return res.status(404).json({ error: \"User not found.\" });\n\n      const assignedProp = await detectAssignedPropName();\n      const availableProp = await detectAvailableQtyPropName(); // قد يكون null\n      const statusProp   = await detectStatusPropName();        // غالبًا \"Status\"\n\n      const items = [];\n      let hasMore = true;\n      let startCursor = undefined;\n\n      while (hasMore) {\n        const resp = await notion.databases.query({\n          database_id: ordersDatabaseId,\n          start_cursor: startCursor,\n          filter: { property: assignedProp, relation: { contains: userId } },\n          sorts: [{ timestamp: \"created_time\", direction: \"descending\" }],\n        });\n\n        for (const page of resp.results) {\n          const props = page.properties || {};\n\n          // Product name\n          let productName = \"Unknown Product\";\n          const productRel = props.Product?.relation;\n          if (Array.isArray(productRel) && productRel.length) {\n            try {\n              const productPage = await notion.pages.retrieve({\n                page_id: productRel[0].id,\n              });\n              productName =\n                productPage.properties?.Name?.title?.[0]?.plain_text ||\n                productName;\n            } catch {}\n          }\n\n          const requested = Number(props[\"Quantity Requested\"]?.number || 0);\n          const available = availableProp\n            ? Number(props[availableProp]?.number || 0)\n            : 0;\n          const remaining = Math.max(0, requested - available);\n          const reason = props.Reason?.title?.[0]?.plain_text || \"No Reason\";\n          const status = statusProp ? (props[statusProp]?.select?.name || \"\") : \"\";\n\n          items.push({\n            id: page.id,\n            productName,\n            requested,\n            available,\n            remaining,\n            createdTime: page.created_time,\n            reason,\n            status,\n          });\n        }\n\n        hasMore = resp.has_more;\n        startCursor = resp.next_cursor;\n      }\n\n      res.set(\"Cache-Control\", \"no-store\");\n      res.json(items);\n    } catch (e) {\n      console.error(e);\n      res.status(500).json({ error: \"Failed to fetch assigned orders\" });\n    }\n  },\n);\n\n// 2) تعليم عنصر أنه \"متوفر بالكامل\" (تجعل المتاح = المطلوب)\napp.post(\n  \"/api/orders/assigned/mark-in-stock\",\n  requireAuth,\n  requirePage(\"Assigned Schools Requested Orders\"),\n  async (req, res) => {\n    try {\n      const { orderPageId } = req.body || {};\n      if (!orderPageId) return res.status(400).json({ error: \"orderPageId required\" });\n\n      const availableProp = await detectAvailableQtyPropName();\n      if (!availableProp) {\n        return res.status(400).json({\n          error:\n            'Please add a Number property \"Available Quantity\" (or alias) to the Orders database.',\n        });\n      }\n\n      const page = await notion.pages.retrieve({ page_id: orderPageId });\n      const requested = Number(page.properties?.[\"Quantity Requested\"]?.number || 0);\n      const newAvailable = requested;\n\n      await notion.pages.update({\n        page_id: orderPageId,\n        properties: { [availableProp]: { number: newAvailable } },\n      });\n\n      res.json({\n        success: true,\n        available: newAvailable,\n        remaining: 0,\n      });\n    } catch (e) {\n      console.error(e.body || e);\n      res.status(500).json({ error: \"Failed to update availability\" });\n    }\n  },\n);\n\n// 3) إدخال كمية متاحة جزئيًا\napp.post(\n  \"/api/orders/assigned/available\",\n  requireAuth,\n  requirePage(\"Assigned Schools Requested Orders\"),\n  async (req, res) => {\n    try {\n      const { orderPageId, available } = req.body || {};\n      const availNum = Number(available);\n      if (!orderPageId) return res.status(400).json({ error: \"orderPageId required\" });\n      if (Number.isNaN(availNum) || availNum < 0) {\n        return res.status(400).json({ error: \"available must be a non-negative number\" });\n      }\n\n      const availableProp = await detectAvailableQtyPropName();\n      if (!availableProp) {\n        return res.status(400).json({\n          error:\n            'Please add a Number property \"Available Quantity\" (or alias) to the Orders database.',\n        });\n      }\n\n      const page = await notion.pages.retrieve({ page_id: orderPageId });\n      const requested = Number(page.properties?.[\"Quantity Requested\"]?.number || 0);\n      const newAvailable = Math.min(requested, Math.max(0, Math.floor(availNum)));\n      const remaining = Math.max(0, requested - newAvailable);\n\n      await notion.pages.update({\n        page_id: orderPageId,\n        properties: { [availableProp]: { number: newAvailable } },\n      });\n\n      res.json({ success: true, available: newAvailable, remaining });\n    } catch (e) {\n      console.error(e.body || e);\n      res.status(500).json({ error: \"Failed to update available quantity\" });\n    }\n  },\n);\n\n// 3-b) تحويل حالة مجموعة عناصر طلب إلى Prepared (زر في الكارت)\napp.post(\n  \"/api/orders/assigned/mark-prepared\",\n  requireAuth,\n  requirePage(\"Assigned Schools Requested Orders\"),\n  async (req, res) => {\n    try {\n      const { orderIds } = req.body || {};\n      if (!Array.isArray(orderIds) || orderIds.length === 0) {\n        return res.status(400).json({ error: \"orderIds required\" });\n      }\n      const statusProp = await detectStatusPropName();\n      if (!statusProp) {\n        return res.status(400).json({ error: 'Please add a Select property \"Status\" to the Orders database.' });\n      }\n\n      await Promise.all(\n        orderIds.map((id) =>\n          notion.pages.update({\n            page_id: id,\n            properties: { [statusProp]: { select: { name: \"Prepared\" } } },\n          }),\n        ),\n      );\n\n      res.json({ success: true, updated: orderIds.length });\n    } catch (e) {\n      console.error(e);\n      res.status(500).json({ error: \"Failed to mark as Prepared\" });\n    }\n  },\n);\n\n// 4) PDF بالنواقص فقط (remaining > 0) — يدعم ids كـ GET\napp.get(\n  \"/api/orders/assigned/pdf\",\n  requireAuth,\n  requirePage(\"Assigned Schools Requested Orders\"),\n  async (req, res) => {\n    try {\n      const userId = await getCurrentUserPageId(req.session.username);\n      if (!userId) return res.status(404).json({ error: \"User not found.\" });\n\n      const assignedProp  = await detectAssignedPropName();\n      const availableProp = await detectAvailableQtyPropName();\n\n      const idsStr = String(req.query.ids || \"\").trim();\n      const items = [];\n\n      if (idsStr) {\n        const ids = idsStr.split(\",\").map((s) => s.trim()).filter(Boolean);\n        for (const id of ids) {\n          try {\n            const page = await notion.pages.retrieve({ page_id: id });\n            const props = page.properties || {};\n\n            const rel = props[assignedProp]?.relation || [];\n            const isMine = Array.isArray(rel) && rel.some((r) => r.id === userId);\n            if (!isMine) continue;\n\n            let productName = \"Unknown Product\";\n            const productRel = props.Product?.relation;\n            if (Array.isArray(productRel) && productRel.length) {\n              try {\n                const productPage = await notion.pages.retrieve({ page_id: productRel[0].id });\n                productName = productPage.properties?.Name?.title?.[0]?.plain_text || productName;\n              } catch {}\n            }\n\n            const requested = Number(props[\"Quantity Requested\"]?.number || 0);\n            const available = availableProp ? Number(props[availableProp]?.number || 0) : 0;\n            const remaining = Math.max(0, requested - available);\n            if (remaining > 0) items.push({ productName, requested, available, remaining });\n          } catch {}\n        }\n      } else {\n        let hasMore = true, startCursor;\n        while (hasMore) {\n          const resp = await notion.databases.query({\n            database_id: ordersDatabaseId,\n            start_cursor: startCursor,\n            filter: { property: assignedProp, relation: { contains: userId } },\n            sorts: [{ timestamp: \"created_time\", direction: \"descending\" }],\n          });\n\n          for (const page of resp.results) {\n            const props = page.properties || {};\n            let productName = \"Unknown Product\";\n            const productRel = props.Product?.relation;\n            if (Array.isArray(productRel) && productRel.length) {\n              try {\n                const productPage = await notion.pages.retrieve({ page_id: productRel[0].id });\n                productName = productPage.properties?.Name?.title?.[0]?.plain_text || productName;\n              } catch {}\n            }\n            const requested = Number(props[\"Quantity Requested\"]?.number || 0);\n            const available = availableProp ? Number(props[availableProp]?.number || 0) : 0;\n            const remaining = Math.max(0, requested - available);\n            if (remaining > 0) items.push({ productName, requested, available, remaining });\n          }\n\n          hasMore = resp.has_more;\n          startCursor = resp.next_cursor;\n        }\n      }\n\n      // PDF\n      const fname = `Assigned-Shortage-${new Date().toISOString().slice(0, 10)}.pdf`;\n      res.setHeader(\"Content-Type\", \"application/pdf\");\n      res.setHeader(\"Content-Disposition\", `attachment; filename=\"${fname}\"`);\n\n      const doc = new PDFDocument({ size: \"A4\", margin: 36 });\n      doc.pipe(res);\n\n      doc.font(\"Helvetica-Bold\").fontSize(16).text(\"Assigned Orders — Shortage List\", { align: \"left\" });\n      doc.moveDown(0.2);\n      doc.font(\"Helvetica\").fontSize(10).fillColor(\"#555\").text(`Generated: ${new Date().toLocaleString()}`);\n      doc.moveDown(0.6);\n\n      const pageInnerWidth = doc.page.width - doc.page.margins.left - doc.page.margins.right;\n      const colNameW = Math.floor(pageInnerWidth * 0.5);\n      const colReqW  = Math.floor(pageInnerWidth * 0.15);\n      const colAvailW= Math.floor(pageInnerWidth * 0.15);\n      const colRemW  = pageInnerWidth - colNameW - colReqW - colAvailW;\n\n      const drawHead = () => {\n        const y = doc.y;\n        const h = 20;\n        doc.save();\n        doc.rect(doc.page.margins.left, y, pageInnerWidth, h).fill(\"#F3F4F6\");\n        doc.fillColor(\"#111\").font(\"Helvetica-Bold\").fontSize(10);\n        doc.text(\"Component\", doc.page.margins.left + 6, y + 5, { width: colNameW });\n        doc.text(\"Requested\", doc.page.margins.left + 6 + colNameW, y + 5, { width: colReqW, align: \"right\" });\n        doc.text(\"Available\", doc.page.margins.left + 6 + colNameW + colReqW, y + 5, { width: colAvailW, align: \"right\" });\n        doc.text(\"Missing\", doc.page.margins.left + 6 + colNameW + colReqW + colAvailW, y + 5, { width: colRemW, align: \"right\" });\n        doc.restore();\n        doc.moveDown(1);\n      };\n      const ensureSpace = (need) => {\n        const bottom = doc.page.height - doc.page.margins.bottom;\n        if (doc.y + need > bottom) { doc.addPage(); drawHead(); }\n      };\n      drawHead();\n\n      doc.font(\"Helvetica\").fontSize(11).fillColor(\"#111\");\n      items.forEach((it) => {\n        ensureSpace(22);\n        const y = doc.y;\n        const h = 18;\n        doc.text(it.productName || \"-\", doc.page.margins.left + 2, y, { width: colNameW });\n        doc.text(String(it.requested || 0), doc.page.margins.left + colNameW, y, { width: colReqW, align: \"right\" });\n        doc.text(String(it.available || 0), doc.page.margins.left + colNameW + colReqW, y, { width: colAvailW, align: \"right\" });\n        doc.text(String(it.remaining || 0), doc.page.margins.left + colNameW + colReqW + colAvailW, y, { width: colRemW, align: \"right\" });\n        doc.moveTo(doc.page.margins.left, y + h).lineTo(doc.page.margins.left + pageInnerWidth, y + h).strokeColor(\"#EEE\").lineWidth(1).stroke();\n        doc.y = y + h + 2;\n      });\n\n      doc.end();\n    } catch (e) {\n      console.error(e);\n      res.status(500).json({ error: \"Failed to generate PDF\" });\n    }\n  },\n);\n\n// Components list — requires Create New Order\napp.get(\n  \"/api/components\",\n  requireAuth,\n  requirePage(\"Create New Order\"),\n  async (req, res) => {\n    if (!componentsDatabaseId) {\n      return res\n        .status(500)\n        .json({ error: \"Products_Database ID is not configured.\" });\n    }\n    const allComponents = [];\n    let hasMore = true;\n    let startCursor = undefined;\n    try {\n      while (hasMore) {\n        const response = await notion.databases.query({\n          database_id: componentsDatabaseId,\n          start_cursor: startCursor,\n          sorts: [{ property: \"Name\", direction: \"ascending\" }],\n        });\n        const componentsFromPage = response.results\n          .map((page) => {\n            const titleProperty = page.properties?.Name;\n            const urlProperty = page.properties?.URL;\n            if (titleProperty?.title?.length > 0) {\n              return {\n                id: page.id,\n                name: titleProperty.title[0].plain_text,\n                url: urlProperty ? urlProperty.url : null,\n              };\n            }\n            return null;\n          })\n          .filter(Boolean);\n        allComponents.push(...componentsFromPage);\n        hasMore = response.has_more;\n        startCursor = response.next_cursor;\n      }\n      res.json(allComponents);\n    } catch (error) {\n      console.error(\"Error fetching from Notion:\", error.body || error);\n      res.status(500).json({ error: \"Failed to fetch data from Notion API.\" });\n    }\n  },\n);\n\n// Submit Order — requires Create New Order\napp.post(\n  \"/api/submit-order\",\n  requireAuth,\n  requirePage(\"Create New Order\"),\n  async (req, res) => {\n    if (!ordersDatabaseId || !teamMembersDatabaseId) {\n      return res\n        .status(500)\n        .json({ success: false, message: \"Database IDs are not configured.\" });\n    }\n\n    let { reason, products } = req.body || {};\n    if (!reason || !Array.isArray(products) || products.length === 0) {\n      const d = req.session.orderDraft;\n      if (d && d.reason && Array.isArray(d.products) && d.products.length > 0) {\n        reason = d.reason;\n        products = d.products;\n      }\n    }\n\n    if (!reason || !Array.isArray(products) || products.length === 0) {\n      return res\n        .status(400)\n        .json({ success: false, message: \"Missing reason or products.\" });\n    }\n\n    try {\n      const userQuery = await notion.databases.query({\n        database_id: teamMembersDatabaseId,\n        filter: { property: \"Name\", title: { equals: req.session.username } },\n      });\n\n      if (userQuery.results.length === 0) {\n        return res.status(404).json({ error: \"User not found.\" });\n      }\n      const userId = userQuery.results[0].id;\n\n      const creations = await Promise.all(\n        products.map(async (product) => {\n          const created = await notion.pages.create({\n            parent: { database_id: ordersDatabaseId },\n            properties: {\n              Reason: { title: [{ text: { content: reason || \"\" } }] },\n              \"Quantity Requested\": { number: Number(product.quantity) },\n              Product: { relation: [{ id: product.id }] },\n              \"Status\": { select: { name: \"Pending\" } },\n              \"Teams Members\": { relation: [{ id: userId }] },\n            },\n          });\n\n          let productName = \"Unknown Product\";\n          try {\n            const productPage = await notion.pages.retrieve({\n              page_id: product.id,\n            });\n            productName =\n              productPage.properties?.Name?.title?.[0]?.plain_text ||\n              productName;\n          } catch {}\n\n          return {\n            orderPageId: created.id,\n            productId: product.id,\n            productName,\n            quantity: Number(product.quantity),\n            createdTime: created.created_time,\n          };\n        }),\n      );\n\n      const recentOrders = creations.map((c) => ({\n        id: c.orderPageId,\n        reason,\n        productName: c.productName,\n        quantity: c.quantity,\n        status: \"Pending\",\n        createdTime: c.createdTime,\n      }));\n      req.session.recentOrders = (req.session.recentOrders || []).concat(\n        recentOrders,\n      );\n      if (req.session.recentOrders.length > 50) {\n        req.session.recentOrders = req.session.recentOrders.slice(-50);\n      }\n\n      delete req.session.orderDraft;\n\n      res.json({\n        success: true,\n        message: \"Order submitted and saved to Notion successfully!\",\n        orderItems: creations.map((c) => ({\n          orderPageId: c.orderPageId,\n          productId: c.productId,\n        })),\n      });\n    } catch (error) {\n      console.error(\"Error creating page in Notion:\", error.body || error);\n      res\n        .status(500)\n        .json({ success: false, message: \"Failed to save order to Notion.\" });\n    }\n  },\n);\n\n// Update Status — requires Current Orders\napp.post(\n  \"/api/update-received\",\n  requireAuth,\n  requirePage(\"Current Orders\"),\n  async (req, res) => {\n    const { orderPageId } = req.body;\n    if (!orderPageId) {\n      return res\n        .status(400)\n        .json({ success: false, error: \"Missing orderPageId\" });\n    }\n    try {\n      await notion.pages.update({\n        page_id: orderPageId,\n        properties: { \"Status\": { select: { name: \"Received\" } } },\n      });\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\n        \"Error updating status:\",\n        error.body || error.message,\n      );\n      res\n        .status(500)\n        .json({ success: false, error: \"Failed to update status\" });\n    }\n  },\n);\n\n// ===== Stocktaking data (JSON) — requires Stocktaking =====\napp.get(\n  \"/api/stock\",\n  requireAuth,\n  requirePage(\"Stocktaking\"),\n  async (req, res) => {\n    if (!teamMembersDatabaseId || !stocktakingDatabaseId) {\n      return res\n        .status(500)\n        .json({ error: \"Database IDs are not configured.\" });\n    }\n    try {\n      const userResponse = await notion.databases.query({\n        database_id: teamMembersDatabaseId,\n        filter: { property: \"Name\", title: { equals: req.session.username } },\n      });\n      if (userResponse.results.length === 0)\n        return res.status(404).json({ error: \"User not found.\" });\n\n      const user = userResponse.results[0];\n      const schoolProp = user.properties.School || {};\n      const schoolName =\n        schoolProp?.select?.name ||\n        (Array.isArray(schoolProp?.rich_text) &&\n          schoolProp.rich_text[0]?.plain_text) ||\n        (Array.isArray(schoolProp?.title) && schoolProp.title[0]?.plain_text) ||\n        null;\n\n      if (!schoolName)\n        return res\n          .status(404)\n          .json({ error: \"Could not determine school name for the user.\" });\n\n      const allStock = [];\n      let hasMore = true;\n      let startCursor = undefined;\n\n      const numberFrom = (prop) => {\n        if (!prop) return undefined;\n        if (typeof prop.number === \"number\") return prop.number;\n        if (prop.formula && typeof prop.formula.number === \"number\")\n          return prop.formula.number;\n        return undefined;\n      };\n      const firstDefinedNumber = (...props) => {\n        for (const p of props) {\n          const n = numberFrom(p);\n          if (typeof n === \"number\") return n;\n        }\n        return 0;\n      };\n\n      while (hasMore) {\n        const stockResponse = await notion.databases.query({\n          database_id: stocktakingDatabaseId,\n          start_cursor: startCursor,\n          sorts: [{ property: \"Name\", direction: \"ascending\" }],\n        });\n\n        const stockFromPage = stockResponse.results\n          .map((page) => {\n            const props = page.properties || {};\n            const componentName =\n              props.Name?.title?.[0]?.plain_text ||\n              props.Component?.title?.[0]?.plain_text ||\n              \"Untitled\";\n\n            const quantity = firstDefinedNumber(props[schoolName]);\n            const oneKitQuantity = firstDefinedNumber(\n              props[\"One Kit Quantity\"],\n              props[\"One Kit Qty\"],\n              props[\"One kit qty\"],\n              props[\"Kit Qty\"],\n              props[\"OneKitQuantity\"],\n            );\n\n            let tag = null;\n            if (props.Tag?.select) {\n              tag = {\n                name: props.Tag.select.name,\n                color: props.Tag.select.color || \"default\",\n              };\n            } else if (\n              Array.isArray(props.Tag?.multi_select) &&\n              props.Tag.multi_select.length > 0\n            ) {\n              const t = props.Tag.multi_select[0];\n              tag = { name: t.name, color: t.color || \"default\" };\n            } else if (\n              Array.isArray(props.Tags?.multi_select) &&\n              props.Tags.multi_select.length > 0\n            ) {\n              const t = props.Tags.multi_select[0];\n              tag = { name: t.name, color: t.color || \"default\" };\n            }\n\n            return {\n              id: page.id,\n              name: componentName,\n              quantity: Number(quantity) || 0,\n              oneKitQuantity: Number(oneKitQuantity) || 0,\n              tag,\n            };\n          })\n          .filter(Boolean);\n\n        allStock.push(...stockFromPage);\n        hasMore = stockResponse.has_more;\n        startCursor = stockResponse.next_cursor;\n      }\n\n      res.json(allStock);\n    } catch (error) {\n      console.error(\"Error fetching stock data:\", error.body || error);\n      res\n        .status(500)\n        .json({ error: \"Failed to fetch stock data from Notion.\" });\n    }\n  },\n);\n\n// ===== Stocktaking PDF download — requires Stocktaking =====\napp.get(\n  \"/api/stock/pdf\",\n  requireAuth,\n  requirePage(\"Stocktaking\"),\n  async (req, res) => {\n    try {\n      const userResponse = await notion.databases.query({\n        database_id: teamMembersDatabaseId,\n        filter: { property: \"Name\", title: { equals: req.session.username } },\n      });\n      if (userResponse.results.length === 0)\n        return res.status(404).json({ error: \"User not found.\" });\n\n      const user = userResponse.results[0];\n      const schoolProp = user.properties.School || {};\n      const schoolName =\n        schoolProp?.select?.name ||\n        (Array.isArray(schoolProp?.rich_text) &&\n          schoolProp.rich_text[0]?.plain_text) ||\n        (Array.isArray(schoolProp?.title) && schoolProp.title[0]?.plain_text) ||\n        null;\n\n      if (!schoolName)\n        return res\n          .status(404)\n          .json({ error: \"Could not determine school name for the user.\" });\n\n      const allStock = [];\n      let hasMore = true;\n      let startCursor = undefined;\n\n      const numberFrom = (prop) => {\n        if (!prop) return undefined;\n        if (typeof prop.number === \"number\") return prop.number;\n        if (prop.formula && typeof prop.formula.number === \"number\")\n          return prop.formula.number;\n        return undefined;\n      };\n      const firstDefinedNumber = (...props) => {\n        for (const p of props) {\n          const n = numberFrom(p);\n          if (typeof n === \"number\") return n;\n        }\n        return 0;\n      };\n\n      while (hasMore) {\n        const stockResponse = await notion.databases.query({\n          database_id: stocktakingDatabaseId,\n          start_cursor: startCursor,\n          sorts: [{ property: \"Name\", direction: \"ascending\" }],\n        });\n\n        const stockFromPage = stockResponse.results\n          .map((page) => {\n            const props = page.properties || {};\n            const componentName =\n              props.Name?.title?.[0]?.plain_text ||\n              props.Component?.title?.[0]?.plain_text ||\n              \"Untitled\";\n\n            const quantity = firstDefinedNumber(props[schoolName]);\n            const oneKitQuantity = firstDefinedNumber(\n              props[\"One Kit Quantity\"],\n              props[\"One Kit Qty\"],\n              props[\"One kit qty\"],\n              props[\"Kit Qty\"],\n              props[\"OneKitQuantity\"],\n            );\n\n            let tag = null;\n            if (props.Tag?.select) {\n              tag = {\n                name: props.Tag.select.name,\n                color: props.Tag.select.color || \"default\",\n              };\n            } else if (\n              Array.isArray(props.Tag?.multi_select) &&\n              props.Tag.multi_select.length > 0\n            ) {\n              const t = props.Tag.multi_select[0];\n              tag = { name: t.name, color: t.color || \"default\" };\n            } else if (\n              Array.isArray(props.Tags?.multi_select) &&\n              props.Tags.multi_select.length > 0\n            ) {\n              const t = props.Tags.multi_select[0];\n              tag = { name: t.name, color: t.color || \"default\" };\n            }\n\n            return {\n              id: page.id,\n              name: componentName,\n              quantity: Number(quantity) || 0,\n              oneKitQuantity: Number(oneKitQuantity) || 0,\n              tag,\n            };\n          })\n          .filter(Boolean);\n\n        allStock.push(...stockFromPage);\n        hasMore = stockResponse.has_more;\n        startCursor = stockResponse.next_cursor;\n      }\n\n      // Grouping + PDF layout (كما هو)\n      const groupsMap = new Map();\n      (allStock || []).forEach((it) => {\n        const name = it?.tag?.name || \"Untagged\";\n        const color = it?.tag?.color || \"default\";\n        const key = `${String(name).toLowerCase()}|${color}`;\n        if (!groupsMap.has(key)) groupsMap.set(key, { name, color, items: [] });\n        groupsMap.get(key).items.push(it);\n      });\n      let groups = Array.from(groupsMap.values()).sort((a, b) =>\n        String(a.name).localeCompare(String(b.name)),\n      );\n      const untagged = groups.filter(\n        (g) => String(g.name).toLowerCase() === \"untagged\" || g.name === \"-\",\n      );\n      groups = groups\n        .filter(\n          (g) =>\n            !(String(g.name).toLowerCase() === \"untagged\" || g.name === \"-\"),\n        )\n        .concat(untagged);\n\n      const fname = `Stocktaking-${new Date().toISOString().slice(0, 10)}.pdf`;\n      res.setHeader(\"Content-Type\", \"application/pdf\");\n      res.setHeader(\"Content-Disposition\", `attachment; filename=\"${fname}\"`);\n\n      const doc = new PDFDocument({ size: \"A4\", margin: 36 });\n      doc.pipe(res);\n\n      const palette = {\n        default: { fill: \"#F3F4F6\", border: \"#E5E7EB\", text: \"#111827\" },\n        gray: { fill: \"#F3F4F6\", border: \"#E5E7EB\", text: \"#374151\" },\n        brown: { fill: \"#EFEBE9\", border: \"#D7CCC8\", text: \"#4E342E\" },\n        orange: { fill: \"#FFF7ED\", border: \"#FED7AA\", text: \"#9A3412\" },\n        yellow: { fill: \"#FEFCE8\", border: \"#FDE68A\", text: \"#854D0E\" },\n        green: { fill: \"#ECFDF5\", border: \"#A7F3D0\", text: \"#065F46\" },\n        blue: { fill: \"#EFF6FF\", border: \"#BFDBFE\", text: \"#1E40AF\" },\n        purple: { fill: \"#F5F3FF\", border: \"#DDD6FE\", text: \"#5B21B6\" },\n        pink: { fill: \"#FDF2F8\", border: \"#FBCFE8\", text: \"#9D174D\" },\n        red: { fill: \"#FEF2F2\", border: \"#FECACA\", text: \"#991B1B\" },\n      };\n      const getPal = (c = \"default\") => palette[c] || palette.default;\n\n      doc\n        .font(\"Helvetica-Bold\")\n        .fontSize(18)\n        .fillColor(\"#111827\")\n        .text(\"Stocktaking\", { align: \"left\" });\n      doc.moveDown(0.2);\n      doc\n        .font(\"Helvetica\")\n        .fontSize(10)\n        .fillColor(\"#6B7280\")\n        .text(`School: ${schoolName}`, { continued: true })\n        .text(`   •   Generated: ${new Date().toLocaleString()}`);\n      doc.moveDown(0.6);\n\n      const pageInnerWidth =\n        doc.page.width - doc.page.margins.left - doc.page.margins.right;\n      const gap = 10;\n      const colKitW = 120;\n      const colQtyW = 90;\n      const colNameW = pageInnerWidth - colKitW - colQtyW - gap * 2;\n\n      const drawGroupHeader = (gName, pal, count, cont = false) => {\n        const y = doc.y + 2;\n        const h = 22;\n        doc.save();\n        doc\n          .roundedRect(doc.page.margins.left, y, pageInnerWidth, h, 6)\n          .fillColor(pal.fill)\n          .strokeColor(pal.border)\n          .lineWidth(1)\n          .fillAndStroke();\n        doc\n          .fillColor(\"#6B7280\")\n          .font(\"Helvetica-Bold\")\n          .fontSize(10)\n          .text(\"Tag\", doc.page.margins.left + 10, y + 6);\n        const pillText = cont ? `${gName} (cont.)` : gName;\n        const pillPadX = 10,\n          pillH = 16;\n        const pillW = Math.max(\n          40,\n          doc.widthOfString(pillText, { font: \"Helvetica-Bold\", size: 10 }) +\n            pillPadX * 2,\n        );\n        const pillX = doc.page.margins.left + 38;\n        const pillY = y + (h - pillH) / 2;\n        doc\n          .roundedRect(pillX, pillY, pillW, pillH, 8)\n          .fillColor(pal.fill)\n          .strokeColor(pal.border)\n          .lineWidth(1)\n          .fillAndStroke();\n        doc\n          .fillColor(pal.text)\n          .font(\"Helvetica-Bold\")\n          .fontSize(10)\n          .text(pillText, pillX + pillPadX, pillY + 3);\n        const countTxt = `${count} items`;\n        doc\n          .fillColor(\"#111827\")\n          .font(\"Helvetica-Bold\")\n          .text(countTxt, doc.page.margins.left, y + 5, {\n            width: pageInnerWidth - 10,\n            align: \"right\",\n          });\n        doc.restore();\n        doc.moveDown(1.4);\n      };\n\n      const drawTableHead = (pal) => {\n        const y = doc.y;\n        const h = 20;\n        doc.save();\n        doc\n          .roundedRect(doc.page.margins.left, y, pageInnerWidth, h, 6)\n          .fillColor(pal.fill)\n          .strokeColor(pal.border)\n          .lineWidth(1)\n          .fillAndStroke();\n        doc.fillColor(pal.text).font(\"Helvetica-Bold\").fontSize(10);\n\n        doc.text(\"Component\", doc.page.margins.left + 10, y + 5, {\n          width: colNameW,\n        });\n        doc.text(\n          \"One Kit Quantity\",\n          doc.page.margins.left + 10 + colNameW + gap,\n          y + 5,\n          { width: colKitW - 10, align: \"right\" },\n        );\n        const lastX = doc.page.margins.left + colNameW + gap + colKitW + gap;\n        doc.text(\"In Stock\", lastX, y + 5, {\n          width: colQtyW - 10,\n          align: \"right\",\n        });\n\n        doc.restore();\n        doc.moveDown(1.2);\n      };\n\n      const ensureSpace = (needH, onNewPage) => {\n        const bottom = doc.page.height - doc.page.margins.bottom;\n        if (doc.y + needH > bottom) {\n          doc.addPage();\n          onNewPage?.();\n        }\n      };\n\n      const drawRow = (item, pal) => {\n        const y = doc.y;\n        const nameHeight = doc.heightOfString(item.name || \"-\", {\n          width: colNameW,\n        });\n        const rowH = Math.max(18, nameHeight);\n        ensureSpace(rowH + 8);\n\n        doc.font(\"Helvetica\").fontSize(11).fillColor(\"#111827\");\n        doc.text(item.name || \"-\", doc.page.margins.left + 2, doc.y, {\n          width: colNameW,\n        });\n\n        const text = String(Number(item.oneKitQuantity ?? 0));\n        const pillPadX = 8,\n          pillH = 16;\n        const pillW = Math.max(\n          32,\n          doc.widthOfString(text, { font: \"Helvetica-Bold\", size: 10 }) +\n            pillPadX * 2,\n        );\n        const pillX =\n          doc.page.margins.left + colNameW + gap + (colKitW - pillW - 10);\n        const pillY = y + (rowH - pillH) / 2;\n        doc\n          .roundedRect(pillX, pillY, pillW, pillH, 8)\n          .fillColor(pal.fill)\n          .strokeColor(pal.border)\n          .lineWidth(1)\n          .fillAndStroke();\n        doc\n          .fillColor(pal.text)\n          .font(\"Helvetica-Bold\")\n          .fontSize(10)\n          .text(text, pillX + pillPadX, pillY + 3);\n\n        const lastX = doc.page.margins.left + colNameW + gap + colKitW + gap;\n        doc\n          .fillColor(\"#111827\")\n          .font(\"Helvetica\")\n          .fontSize(11)\n          .text(String(Number(item.quantity ?? 0)), lastX, y, {\n            width: colQtyW - 10,\n            align: \"right\",\n          });\n\n        doc\n          .moveTo(doc.page.margins.left, y + rowH + 4)\n          .lineTo(doc.page.margins.left + pageInnerWidth, y + rowH + 4)\n          .strokeColor(\"#F3F4F6\")\n          .lineWidth(1)\n          .stroke();\n\n        doc.y = y + rowH + 6;\n      };\n\n      const ensureGroupStartSpace = () => ensureSpace(22 + 20 + 18);\n\n      for (const g of groups) {\n        const pal = getPal(g.color);\n\n        ensureGroupStartSpace();\n        drawGroupHeader(g.name, pal, g.items.length, false);\n        drawTableHead(pal);\n\n        g.items.sort((a, b) => (a.name || \"\").localeCompare(b.name || \"\"));\n        for (const item of g.items) {\n          ensureSpace(40, () => {\n            drawGroupHeader(g.name, pal, g.items.length, true);\n            drawTableHead(pal);\n          });\n          drawRow(item, pal);\n        }\n      }\n\n      doc.end();\n    } catch (e) {\n      console.error(\"PDF generation error:\", e);\n      res.status(500).json({ error: \"Failed to generate PDF\" });\n    }\n  },\n);\n\n// Update account info (PATCH) — اختيارى\napp.patch(\"/api/account\", requireAuth, async (req, res) => {\n  if (!teamMembersDatabaseId) {\n    return res\n      .status(500)\n      .json({ error: \"Team_Members database ID is not configured.\" });\n  }\n  try {\n    const { name, phone, email, password } = req.body;\n    const updateProps = {};\n    if (typeof phone !== \"undefined\") {\n      updateProps[\"Phone\"] = { phone_number: (phone || \"\").trim() || null };\n    }\n    if (typeof email !== \"undefined\") {\n      updateProps[\"Email\"] = { email: (email || \"\").trim() || null };\n    }\n    if (typeof password !== \"undefined\") {\n      const n = Number(password);\n      if (Number.isNaN(n)) {\n        return res.status(400).json({ error: \"Password must be a number.\" });\n      }\n      updateProps[\"Password\"] = { number: n };\n    }\n    if (typeof name !== \"undefined\" && name.trim()) {\n      updateProps[\"Name\"] = { title: [{ text: { content: name.trim() } }] };\n    }\n    if (Object.keys(updateProps).length === 0) {\n      return res.status(400).json({ error: \"No valid fields to update.\" });\n    }\n\n    const response = await notion.databases.query({\n      database_id: teamMembersDatabaseId,\n      filter: { property: \"Name\", title: { equals: req.session.username } },\n    });\n    if (response.results.length === 0) {\n      return res.status(404).json({ error: \"User not found.\" });\n    }\n\n    const userPageId = response.results[0].id;\n\n    await notion.pages.update({\n      page_id: userPageId,\n      properties: updateProps,\n    });\n\n    if (updateProps[\"Name\"]) {\n      req.session.username = name.trim();\n    }\n\n    res.json({ success: true });\n  } catch (error) {\n    console.error(\"Error updating account:\", error.body || error);\n    res.status(500).json({ error: \"Failed to update account.\" });\n  }\n});\n\n// Funds database validation endpoint\napp.get(\"/api/funds/check\", requireAuth, requirePage(\"Funds\"), async (req, res) => {\n  try {\n    if (!fundsDatabaseId) {\n      return res.status(500).json({ \n        error: \"Funds database ID is not configured in environment variables\",\n        configured: false\n      });\n    }\n\n    // Try to retrieve the database to verify it exists and is accessible\n    const database = await notion.databases.retrieve({ \n      database_id: fundsDatabaseId \n    });\n\n    res.json({ \n      configured: true, \n      title: database.title?.[0]?.plain_text || \"Funds Database\",\n      message: \"Funds database is properly configured\"\n    });\n  } catch (error) {\n    console.error(\"Funds database check error:\", error.body || error);\n    res.status(500).json({ \n      configured: false,\n      error: error.message || \"Cannot access funds database. Check database ID and sharing permissions.\"\n    });\n  }\n});\n\n// Funds API - Submit mission expenses\napp.post(\"/api/funds\", requireAuth, requirePage(\"Funds\"), async (req, res) => {\n  if (!fundsDatabaseId || !teamMembersDatabaseId) {\n    return res\n      .status(500)\n      .json({ error: \"Database IDs are not configured.\" });\n  }\n\n  try {\n    const { assignment, expenses } = req.body || {};\n\n    if (!assignment || !assignment.trim()) {\n      return res.status(400).json({ error: \"Mission assignment is required\" });\n    }\n\n    if (!Array.isArray(expenses) || expenses.length === 0) {\n      return res.status(400).json({ error: \"At least one expense is required\" });\n    }\n\n    // Get user information\n    const userQuery = await notion.databases.query({\n      database_id: teamMembersDatabaseId,\n      filter: { property: \"Name\", title: { equals: req.session.username } },\n    });\n\n    if (userQuery.results.length === 0) {\n      return res.status(404).json({ error: \"User not found.\" });\n    }\n\n    const userId = userQuery.results[0].id;\n\n    // Validate expenses data\n    for (const expense of expenses) {\n      const { fundsType, date, from, to, cost } = expense;\n\n      if (!fundsType || !date || !from || !to || typeof cost !== 'number' || cost <= 0) {\n        return res.status(400).json({ \n          error: \"All expense fields are required and cost must be a positive number\" \n        });\n      }\n    }\n\n    // Create expense entries in Notion database\n    const createdExpenses = await Promise.all(\n      expenses.map(async (expense) => {\n        const { fundsType, date, from, to, cost, screenshotName, screenshotType, screenshotSize } = expense;\n\n        // Prepare properties for Notion page\n        const properties = {\n          \"Assignment\": { \n            title: [{ text: { content: assignment.trim() } }] \n          },\n          \"Funds Type\": { \n            select: { name: fundsType } \n          },\n          \"Date\": { \n            date: { start: date } \n          },\n          \"From\": { \n            rich_text: [{ text: { content: from } }] \n          },\n          \"To\": { \n            rich_text: [{ text: { content: to } }] \n          },\n          \"Cost\": { \n            number: cost \n          },\n          \"Team Members\": { \n            relation: [{ id: userId }] \n          }\n        };\n\n        // Handle file upload if present\n        let children = [];\n        if (screenshotName) {\n          try {\n            // Add receipt info as a callout block\n            // Note: Full file upload functionality requires cloud storage integration\n            children = [\n              {\n                object: \"block\",\n                type: \"callout\",\n                callout: {\n                  rich_text: [\n                    {\n                      type: \"text\",\n                      text: {\n                        content: `Receipt file: ${screenshotName} (${screenshotType || 'unknown type'}${screenshotSize ? `, ${Math.round(screenshotSize/1024)}KB` : ''})`\n                      }\n                    }\n                  ],\n                  icon: {\n                    emoji: \"📎\"\n                  }\n                }\n              }\n            ];\n          } catch (error) {\n            console.warn(\"Error processing screenshot info:\", error);\n          }\n        }\n\n        // Create the page in Notion\n        const created = await notion.pages.create({\n          parent: { database_id: fundsDatabaseId },\n          properties,\n          children: children.length > 0 ? children : undefined\n        });\n\n        return {\n          id: created.id,\n          assignment: assignment.trim(),\n          fundsType,\n          date,\n          from,\n          to,\n          cost,\n          createdTime: created.created_time\n        };\n      })\n    );\n\n    // Return success response\n    res.json({\n      success: true,\n      message: \"Mission expenses submitted successfully\",\n      data: {\n        assignment: assignment.trim(),\n        expensesCount: createdExpenses.length,\n        totalCost: expenses.reduce((sum, exp) => sum + exp.cost, 0),\n        createdExpenses\n      }\n    });\n\n  } catch (error) {\n    console.error(\"Error submitting funds:\", error.body || error);\n    res.status(500).json({ error: \"Failed to submit mission expenses\" });\n  }\n});\n\n// Start server\napp.listen(PORT, \"0.0.0.0\", () => {\n  console.log(`Server is running on http://0.0.0.0:${PORT}`);\n});\n// بعد pickPropName() والدوال المشابهة\nasync function detectOrderIdPropName() {\n  const props = await getOrdersDBProps();\n  return (\n    pickPropName(props, [\n      \"Order ID\",\n      \"Order Code\",\n      \"Order Group\",\n      \"Batch ID\",\n      \"OrderId\",\n      \"Order_Code\"\n    ]) || null\n  );\n}","size_bytes":63309},"public/css/login.css":{"content":"\n* { \n  box-sizing: border-box; \n  margin: 0; \n  padding: 0; \n}\n\nbody {\n  font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif;\n  background: url('/images/login-background.jpg') center/cover no-repeat, linear-gradient(135deg, #F5F3F0 0%, #E5E7EB 100%);\n  min-height: 100vh;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: #333;\n}\n\n.login-container {\n  width: 100%;\n  max-width: 400px;\n  padding: 2rem;\n}\n\n.login-card {\n  background: rgba(255, 255, 255, 0.95);\n  backdrop-filter: blur(10px);\n  border: 1px solid rgba(255, 255, 255, 0.2);\n  border-radius: 12px;\n  padding: 2.5rem;\n  box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.15), 0 10px 10px -5px rgba(0, 0, 0, 0.08);\n  text-align: center;\n}\n\n.login-header {\n  margin-bottom: 2rem;\n}\n\n.login-logo {\n  height: 60px;\n  margin-bottom: 1rem;\n}\n\n.login-header h1 {\n  color: #111827;\n  font-size: 1.8rem;\n  margin-bottom: 0.5rem;\n  font-weight: 700;\n}\n\n.login-header p {\n  color: #6B7280;\n  font-size: 0.95rem;\n}\n\n.login-form {\n  text-align: left;\n}\n\n.form-group {\n  margin-bottom: 1.5rem;\n}\n\n.form-group label {\n  display: block;\n  font-weight: 600;\n  margin-bottom: 0.5rem;\n  color: #374151;\n  font-size: 0.9rem;\n}\n\n.form-group input {\n  width: 100%;\n  padding: 0.85rem 1rem;\n  border: 2px solid #E5E7EB;\n  border-radius: 8px;\n  font-size: 1rem;\n  transition: all 0.2s ease;\n  background-color: #F9FAFB;\n}\n\n.form-group input:focus {\n  outline: none;\n  border-color: #D97706;\n  background-color: #ffffff;\n  box-shadow: 0 0 0 3px rgba(217, 119, 6, 0.1);\n}\n\n.login-btn {\n  width: 100%;\n  background-color: #EA580C;\n  color: white;\n  padding: 0.875rem 1rem;\n  border: none;\n  border-radius: 8px;\n  font-size: 1rem;\n  font-weight: 600;\n  cursor: pointer;\n  transition: background-color 0.2s ease;\n  margin-top: 0.5rem;\n}\n\n.login-btn:hover {\n  background-color: #C2410C;\n}\n\n.login-btn:disabled {\n  background-color: #9CA3AF;\n  cursor: not-allowed;\n}\n\n.error-message {\n  background-color: #FEE2E2;\n  color: #DC2626;\n  padding: 0.75rem;\n  border-radius: 6px;\n  margin-top: 1rem;\n  font-size: 0.9rem;\n  border: 1px solid #FECACA;\n}\n\n.success-message {\n  background-color: #D1FAE5;\n  color: #059669;\n  padding: 0.75rem;\n  border-radius: 6px;\n  margin-top: 1rem;\n  font-size: 0.9rem;\n  border: 1px solid #A7F3D0;\n}\n\n/* Loading state */\n.login-btn.loading {\n  background-color: #9CA3AF;\n  cursor: not-allowed;\n}\n\n.login-btn.loading::after {\n  content: \"\";\n  display: inline-block;\n  width: 16px;\n  height: 16px;\n  margin-left: 8px;\n  border: 2px solid #ffffff;\n  border-radius: 50%;\n  border-top-color: transparent;\n  animation: spin 1s ease-in-out infinite;\n}\n\n@keyframes spin {\n  to { transform: rotate(360deg); }\n}\n\n@media (max-width: 480px) {\n  .login-container {\n    padding: 1rem;\n  }\n\n  .login-card {\n    padding: 2rem;\n  }\n}\n\n/* Show/Hide password control */\n.password-wrapper { position: relative; }\n.password-wrapper input[type=\"password\"],\n.password-wrapper input[type=\"text\"] { padding-right: 2.5rem; }\n.toggle-password {\n  position: absolute; top: 50%; right: .6rem; transform: translateY(-50%);\n  width: 2rem; height: 2rem; border: 0; background: transparent; color: #6B7280;\n  display: inline-flex; align-items: center; justify-content: center; cursor: pointer;\n  border-radius: 50%;\n}\n.toggle-password:hover { color: #374151; background: rgba(0,0,0,.04); }\n.toggle-password:active { transform: translateY(-50%) scale(.98); }\n","size_bytes":3448},"public/css/style.css":{"content":"/* =================================\n   Global Styles & Variables\n   ================================= */\n:root {\n  --primary-color: #EA580C; /* Orange */\n  --primary-color-dark: #C2410C;\n  --text-primary: #1F2937;\n  --text-secondary: #6B7280;\n  --bg-main: #FFFFFF;\n  --bg-card: #FFFFFF;\n  --border-color: #E5E7EB;\n\n  --aside-w: 270px;\n  --aside-w-collapsed: 88px;\n}\n\n*{ box-sizing:border-box; margin:0; padding:0; }\n\nbody{\n  font-family:-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif;\n  color:var(--text-primary);\n  line-height:1.6;\n  transition:padding-left .3s ease;\n  /* NEW: app background */\n  background: var(--bg-main) url('/images/App-background.png') center top / cover no-repeat fixed;\n}\n@media (max-width:768px){\n  body{ background-attachment: scroll; background-size: cover; }\n}\n\nbody.sidebar-collapsed{ padding-left:0; }\n\n/* =================================\n   Login\n   ================================= */\n.login-container{\n  display:flex; justify-content:center; align-items:center; height:100vh;\n  background-image:url('/images/login-background.jpg');\n  background-size:cover; background-position:center;\n}\n.login-card{\n  background:rgba(255,255,255,.95); backdrop-filter:blur(8px);\n  padding:2.5rem; border-radius:16px; box-shadow:0 10px 35px rgba(0,0,0,.1);\n  width:420px; max-width:90%; text-align:center; border:1px solid rgba(255,255,255,.2);\n}\n.login-card .logo{ height:50px; margin-bottom:1rem; }\n.login-card h2{ font-size:1.8rem; color:#111827; margin-bottom:.5rem; }\n.login-card p{ color:#6B7280; margin-bottom:2rem; }\n.login-card .form-group{ text-align:left; margin-bottom:1.25rem; }\n.login-card .form-group label{ font-size:.9rem; }\n.login-card input[type=\"text\"], .login-card input[type=\"password\"]{\n  background:#F9FAFB; border:1px solid #E5E7EB; padding:.9rem; font-size:1rem; border-radius:8px;\n}\n.login-card input[type=\"text\"]:focus, .login-card input[type=\"password\"]:focus{\n  border-color:var(--primary-color); box-shadow:0 0 0 2px rgba(234,88,12,.2); outline:none;\n}\n.login-card .submit-btn{ width:100%; padding:.85rem; font-size:1rem; }\n.error-message{\n  color:#DC2626; background:#FEE2E2; border:1px solid #FCA5A5; border-radius:4px;\n  padding:.75rem; margin-top:1rem; text-align:center; font-size:.9rem;\n}\n\n/* =================================\n   Layout\n   ================================= */\n.app-container{ display:flex; min-height:100vh; }\n\n/* Sidebar (rounded frame) */\n.sidebar{\n  width:var(--aside-w); background:#111827; display:flex; flex-direction:column; flex-shrink:0;\n  position:fixed; top:14px; left:14px; bottom:14px;\n  border-radius:28px; border:1px solid #e5e7eb; box-shadow:0 18px 36px rgba(0,0,0,.18);\n  transition:transform .3s ease, width .25s ease; z-index:100;\n}\nbody.sidebar-collapsed .sidebar{ transform:translateX(calc(-100% - 14px)); }\n\n.sidebar-header{ padding:1.5rem; display:flex; align-items:center; gap:12px; border-bottom:1px solid #1F2937; }\n.sidebar-header .logo{ height:32px; margin-right:.75rem; }\n.sidebar-header h2{ margin:0; font-size:1.25rem; color:#F9FAFB; }\n\n.nav-label{ white-space:nowrap; }\n.sidebar-nav{ padding:1rem; flex-grow:1; }\n.nav-link{\n  display:flex; align-items:center; gap:.75rem; padding:.75rem 1rem; border-radius:6px; text-decoration:none;\n  color:#9CA3AF; font-weight:500; margin-bottom:.5rem; transition:background-color .2s, color .2s;\n}\n.nav-link:hover{ background:#1F2937; color:#fff; }\n.nav-link.active{ \n  background:var(--primary-color); \n  color:#fff; \n  font-weight:600;\n  box-shadow: 0 8px 16px rgba(234, 88, 12, 0.25);\n}\n.sidebar-footer{ padding:1.5rem; border-top:1px solid #1F2937; }\n\n.main-content{ flex-grow:1; padding-left:var(--aside-w); transition:padding-left .3s ease; }\nbody.sidebar-collapsed .main-content{ padding-left:0; }\n\n/* =================================\n   Header (two rows) + page title label\n   ================================= */\n.main-header{\n  display:grid; grid-template-rows:auto auto; gap:10px; align-items:center;\n  padding:1rem 2rem; background:transparent;\n  border-bottom:1px solid var(--border-color);\n}\n.header-row1{ display:flex; align-items:center; gap:12px; }\n.header-row1 .left{ display:flex; align-items:center; gap:12px; flex:1; min-width:0; }\n.header-row1 .right{ margin-left:auto; display:flex; align-items:center; gap:12px; }\n.header-row2{ display:flex; align-items:center; gap:10px; }\n\n.page-title{\n  display:inline-flex; align-items:center; background:#111827; color:#fff;\n  border-radius:12px; padding:8px 14px; font-size:1.1rem; font-weight:800;\n  box-shadow:0 10px 24px rgba(0,0,0,.18);\n}\n\n.menu-toggle{ background:none; border:none; cursor:pointer; padding:.5rem; color:var(--text-secondary); }\n.menu-toggle:hover{ color:var(--text-primary); }\n\n.greeting-pill{\n  position:relative; display:inline-flex; align-items:center; gap:10px;\n  background:#fff; border:1px solid #E9EDF3; border-radius:14px;\n  padding:8px 12px; box-shadow:0 10px 24px rgba(0,0,0,.06); max-width:100%;\n}\n.greeting-emoji{ width:28px; height:28px; border-radius:50%; background:#FFE6D5; display:grid; place-items:center; font-size:16px; }\n.greeting-avatar{ width:34px; height:34px; border-radius:50%; background:#fff; border:1px solid #E9EDF3; display:grid; place-items:center; overflow:hidden; box-shadow:0 6px 16px rgba(0,0,0,.06); }\n.greeting-avatar img{ width:100%; height:100%; object-fit:cover; display:block; }\n.greet-text{ display:flex; flex-direction:column; line-height:1.2; }\n.greet-title{ font-weight:800; color:#111; font-size:14px; }\n.greet-sub{ font-size:12px; color:var(--text-secondary); }\n\n.searchbar{\n  display:flex; align-items:center; gap:10px; background:#fff; border:1px solid var(--border-color);\n  height:44px; border-radius:22px; padding:0 12px 0 10px; box-shadow:0 10px 24px rgba(0,0,0,.06);\n  width:520px; max-width:40vw;\n}\n.searchbar i{ color:#9AA1AC; }\n.searchbar input{ border:none; outline:none; width:100%; font-size:14px; color:var(--text-primary); background:transparent; }\n\n.topbar-right{ display:flex; align-items:center; gap:12px; }\n\n.account-mini{\n  display:inline-flex; align-items:center; gap:8px; height:38px; padding:0 12px 0 6px;\n  background:#2c2f36; color:#f1f5f9; border:1px solid #181a1f; border-radius:999px;\n  text-decoration:none; font-weight:700; box-shadow:0 10px 20px rgba(0,0,0,.18);\n}\n.account-mini:hover{ background:#1f232a; }\n.account-mini .ico-circle{ width:26px; height:26px; border-radius:50%; background:#fff; display:grid; place-items:center; }\n.account-mini .ico-circle img{ width:18px; height:18px; object-fit:contain; display:block; }\n.account-mini .label{ font-size:14px; }\n\n.container, .container-full-width{ padding:2rem; max-width:1400px; margin:0 auto; }\n.container{ display:grid; grid-template-columns:1fr 1fr; gap:2rem; align-items:flex-start; }\n\n.card{ background:var(--bg-card); border-radius:12px; padding:1.5rem; box-shadow:0 1px 3px rgba(0,0,0,.1), 0 1px 2px -1px rgba(0,0,0,.1); }\n.card h2{ margin-bottom:1.5rem; color:var(--primary-color); font-size:1.25rem; }\n\n.account-panel{ }\n.account-grid{\n  display:grid; gap:12px;\n  grid-template-columns:1fr;\n}\n@media (min-width: 900px){\n  .account-grid{ grid-template-columns:1fr 1fr; }\n}\n.acc-row{\n  display:flex; align-items:center; justify-content:space-between;\n  background:#ffffff;\n  border:1px solid #E9EEF5;\n  border-radius:14px;\n  padding:.9rem 1rem;\n  box-shadow:0 6px 18px rgba(0,0,0,.06);\n}\n.acc-left{ display:flex; align-items:center; gap:10px; }\n.acc-ico{\n  width:34px; height:34px; border-radius:50%;\n  background:#F3F6FB; display:grid; place-items:center; color:#111827;\n  border:1px solid #E5EAF2;\n}\n.acc-ico i{ width:18px; height:18px; }\n.acc-label{ font-weight:700; color:#374151; }\n.acc-value{ color:#111827; font-weight:600; }\n\n.form-group label{ display:block; font-weight:500; margin-bottom:.5rem; font-size:.9rem; color:var(--text-primary); }\ninput[type=\"text\"], input[type=\"password\"], input[type=\"number\"]{\n  width:100%; padding:.75rem; border:1px solid #D1D5DB; border-radius:6px; font-size:1rem;\n}\ninput:focus{ border-color:var(--primary-color); box-shadow:0 0 0 2px rgba(234,88,12,.2); outline:none; }\n\n.form-actions{ display:flex; justify-content:space-between; align-items:center; margin-top:1.5rem; }\nbutton{ padding:.75rem 1.5rem; border-radius:6px; border:none; cursor:pointer; font-size:.9rem; font-weight:600; transition:background-color .2s; }\n#addProductBtn{ background:none; border:1px solid var(--primary-color); color:var(--primary-color); }\n#addProductBtn:hover{ background:#FFF7ED; }\n.submit-btn{ background:var(--primary-color); color:#fff; }\n.submit-btn:hover{ background:var(--primary-color-dark); }\n.remove-btn{ background:#EF4444; color:#fff; padding:.5rem .8rem; font-size:.8rem; align-self:center; }\n.remove-btn:hover{ background:#DC2626; }\n\nhr{ border:none; border-top:1px solid #eee; margin:1.5rem 0; }\n\n.product-entry{ display:flex; gap:1rem; margin-bottom:1rem; align-items:flex-end; }\n.product-select-group{ flex-grow:1; }\n.product-input-wrapper{ display:flex; align-items:center; gap:.5rem; }\n.product-input-wrapper .choices{ width:100%; }\n.quantity-group{ flex-basis:100px; flex-shrink:0; }\n.product-link{ color:#2563EB; align-self:center; margin-bottom:.5rem; transition:color .2s ease; flex-shrink:0; }\n.product-link:hover{ color:#1D4ED8; }\n\n.order-card{\n  background:#F9FAFB; border:1px solid #E5E7EB; border-radius:6px;\n  padding:1rem; margin-bottom:1rem; cursor:pointer;\n}\n.order-card h3{ font-size:1.1rem; color:#111827; margin-bottom:.25rem; }\n.order-card .order-time{\n  font-size:.75rem; color:#6B7280; margin-bottom:.75rem; border-bottom:1px solid #E5E7EB; padding-bottom:.5rem;\n}\n.order-card ul{ list-style:none; padding-left:0; }\n.order-card li{\n  background:#fff; padding:.5rem .75rem; border-radius:4px; margin-bottom:.5rem; font-size:.9rem; display:flex; justify-content:space-between;\n}\n.order-card li span{ font-weight:600; color:#4B5563; }\n\n.modal{ display:none; position:fixed; inset:0; background:rgba(0,0,0,.55); justify-content:center; align-items:center; z-index:1000; }\n.modal-content{ background:#fff; color:#111827; padding:1.25rem 1.25rem 1rem; border-radius:12px; width:560px; max-width:92%; box-shadow:0 10px 30px rgba(0,0,0,.2); position:relative; }\n.close-btn{ position:absolute; top:8px; right:12px; background:transparent; border:none; font-size:24px; line-height:1; cursor:pointer; }\n.modal h3{ color:#D97706; margin-bottom:.75rem; }\n.modal ul{ list-style:none; padding-left:0; }\n.modal li{ display:flex; align-items:center; gap:8px; justify-content:space-between; background:#F9FAFB; border:1px solid #E5E7EB; border-radius:6px; padding:.5rem .75rem; margin-bottom:.5rem; }\n\n.receive-btn{ margin-left:10px; padding:6px 10px; font-size:12px; background:#2563EB; color:#fff; border:none; border-radius:6px; cursor:pointer; }\n.receive-btn:hover{ background:#1D4ED8; }\n.receive-btn.received{ background:#16A34A; cursor:default; }\n\n.notification-modal{ position:fixed; bottom:20px; right:20px; z-index:2000; opacity:0; transition:opacity .3s ease-in-out; }\n.notification-content{ display:flex; align-items:center; padding:1rem 1.5rem; border-radius:8px; box-shadow:0 10px 30px rgba(0,0,0,.2); }\n.notification-modal.success .notification-content{ background:#16A34A; color:#fff; }\n.notification-modal.error .notification-content{ background:#DC2626; color:#fff; }\n.notification-icon{ margin-right:1rem; }\n.notification-message{ font-weight:500; }\n.notification-close{ background:none; border:none; color:inherit; opacity:.7; margin-left:1.5rem; cursor:pointer; }\n\n@media (max-width:900px){ .container{ grid-template-columns:1fr; gap:1.5rem; } }\n@media (max-width:768px){\n  .sidebar{ transform:translateX(calc(-100% - 14px)); width:var(--aside-w); }\n  .main-content{ padding-left:0; }\n  .header-row1{ flex-wrap:wrap; gap:8px; }\n  .searchbar{ max-width:none; width:100%; order:2; }\n  .greeting-pill{ order:1; }\n  .topbar-right{ order:3; margin-left:0; width:100%; justify-content:flex-end; }\n  .account-mini .label{ display:none; }\n}\n\n@media (min-width:769px){\n  .sidebar{ transform:none !important; width:var(--aside-w); }\n  body.sidebar-collapsed .sidebar{ transform:none !important; width:var(--aside-w); }\n  .main-content{ padding-left:var(--aside-w) !important; }\n  body.sidebar-collapsed .main-content{ padding-left:var(--aside-w) !important; }\n}\n\n.sidebar-nav .nav-group-title{\n  cursor:pointer; display:flex; justify-content:space-between; align-items:center;\n  padding:.75rem 1rem; font-weight:500; color:#D1D5DB;\n}\n.sidebar-nav .nav-group-title::after{ content:'▶'; font-size:.6em; transition:transform .3s ease; transform:rotate(90deg); }\n.sidebar-nav .nav-group:not(.is-active) .nav-group-title::after{ transform:rotate(0deg); }\n.sidebar-nav .nav-group .nav-group-list{\n  list-style:none; padding:0; margin:0; overflow:hidden; max-height:0; transition:max-height .4s ease-in-out;\n  background-color:rgba(255,255,255,.03);\n}\n.sidebar-nav .nav-group.is-active .nav-group-list{ max-height:200px; }\n.sidebar-nav .nav-group-list li a{ padding-left:30px; }\n\n.sidebar-nav .nav-link, .sidebar-nav .nav-group-title, .sidebar-footer .logout-btn{ gap:12px; }\n.sidebar-nav svg, .sidebar-footer svg{ width:18px; height:18px; stroke-width:2; flex-shrink:0; }\n.logout-btn{ width:100%; display:flex; align-items:center; justify-content:center; gap:12px; background:#1F2937; color:#9CA3AF; border:1px solid #374151; }\n.logout-btn:hover{ background:#374151; color:#FFFFFF; }\n\n.sidebar-toggle{\n  background:#1F2937; color:#FFFFFF; border:1px solid #374151;\n  width:32px; height:32px; border-radius:50%; display:flex; align-items:center; justify-content:center; margin-left:auto; padding:0; cursor:pointer;\n  transition:background-color .2s ease, color .2s ease;\n}\n.sidebar-toggle:hover{ background:#374151; }\n.sidebar-toggle svg{ width:20px; height:20px; transition:transform .3s ease; }\nbody.sidebar-collapsed .sidebar-toggle svg{ transform:rotate(180deg); }\n\n@keyframes spin{ from{ transform:rotate(0deg);} to{ transform:rotate(360deg);} }\n#orders-list p{ display:inline-flex; align-items:center; gap:8px; white-space:nowrap; color:var(--text-secondary); }\n.loading-cell{ display:flex; justify-content:center; align-items:center; gap:8px; color:var(--text-secondary); padding:1rem; }\n.loading-icon{ display:inline-block; animation:spin 1.5s linear infinite; vertical-align:middle; }\n\n.sidebar-footer .nav-link{ width:100%; }\n\n.create-order-layout{ grid-template-columns:2fr 1fr; gap:2rem; align-items:start; }\n.page-stepper{ grid-column:1 / -1; margin:-.25rem 0 .5rem; }\n.stepper{ list-style:none; display:flex; align-items:center; gap:28px; }\n.step{ display:flex; align-items:center; gap:10px; color:#6B7280; font-weight:600; font-size:.9rem; }\n.step .circle{ width:28px; height:28px; border-radius:50%; display:inline-flex; align-items:center; justify-content:center; background:#F3F4F6; border:1px solid #D1D5DB; color:#6B7280; }\n.step.active .circle, .step.completed .circle{ background:var(--primary-color); border-color:var(--primary-color); color:#fff; }\n.step .bar{ display:inline-block; width:120px; height:4px; background:#E5E7EB; border-radius:4px; margin-left:10px; }\n.step.completed .bar{ background:var(--primary-color); }\n.form-row-headers{ display:grid; grid-template-columns:1fr 140px; color:var(--text-secondary); font-size:.85rem; margin-bottom:.5rem; padding:0 .25rem; }\n.create-order-layout #products-container .product-entry{\n  display:grid; grid-template-columns:1fr 140px; gap:1rem; margin-bottom:.75rem; align-items:center;\n  background:#fff; border:1px solid #E5E7EB; border-radius:10px; padding:.75rem .9rem;\n}\n@media (min-width: 769px){\n  body.sidebar-mini .sidebar { width: var(--aside-w-collapsed); }\n  body.sidebar-mini .main-content { padding-left: var(--aside-w-collapsed); }\n\n  body.sidebar-mini .sidebar-header h2 { display: none; }\n  body.sidebar-mini .nav-label { display: none; }\n\n  body.sidebar-mini .sidebar-nav .nav-link { justify-content: center; }\n\n  body.sidebar-mini .sidebar-nav .nav-group-title { justify-content: center; gap: 0; font-size: 0; }\n  body.sidebar-mini .sidebar-nav .nav-group-title::after { display: none; }\n  body.sidebar-mini .sidebar-nav .nav-group-list li a { padding-left: 0; }\n\n  body.sidebar-mini .sidebar-footer .nav-link,\n  body.sidebar-mini .sidebar-footer .logout-btn { justify-content: center; font-size: 0; }\n  body.sidebar-mini .sidebar-footer .logout-btn svg { margin: 0; }\n\n  body.sidebar-mini .sidebar-toggle svg { transform: rotate(180deg); }\n}\n.sidebar-nav .nav-group{ position: relative; }\n.sidebar-nav .nav-group .nav-group-list{\n  position: relative;\n  margin: 6px 0 8px 24px;\n  padding-left: 14px;\n  border-left: 2px solid rgba(255,255,255,.14);\n  border-radius: 2px;\n}\n.sidebar-nav .nav-group.is-active .nav-group-list{ max-height: 800px; }\n.sidebar-nav .nav-group .nav-group-list li{ position: relative; }\n.sidebar-nav .nav-group .nav-group-list li::before{\n  content:'';\n  position:absolute;\n  left:-14px;\n  top: 50%;\n  width:14px; height:2px;\n  background: rgba(255,255,255,.14);\n  transform: translateY(-50%);\n  border-radius: 2px;\n}\n.sidebar-nav .nav-group .nav-group-list .nav-link{\n  border-radius: 999px;\n  padding: 0.6rem 0.9rem;\n}\n.sidebar-nav .nav-group .nav-group-list .nav-link:hover{\n  background: rgba(255,255,255,.06);\n  color:#fff;\n}\n.sidebar-nav .nav-group .nav-group-list .nav-link.active{\n  background: rgba(255,255,255,.15);\n  color:#fff;\n}\n.sidebar-nav .nav-group .nav-group-list .nav-group-list{\n  margin-left: 24px;\n  padding-left: 14px;\n  border-left: 2px solid rgba(255,255,255,.14);\n}\n.sidebar-nav .nav-group .nav-group-list .nav-group-list li::before{\n  left:-14px;\n}\n@media (min-width:769px){\n  body.sidebar-mini .sidebar-nav .nav-group .nav-group-list,\n  body.sidebar-mini .sidebar-nav .nav-group .nav-group-list .nav-group-list{\n    border-left: none;\n    margin-left: 0;\n    padding-left: 0;\n  }\n  body.sidebar-mini .sidebar-nav .nav-group .nav-group-list li::before,\n  body.sidebar-mini .sidebar-nav .nav-group .nav-group-list .nav-group-list li::before{\n    display: none;\n  }\n}\n\n/* ### START: MODIFICATION TO UNIFY ACTIVE LINK STYLE ### */\n.sidebar-nav .nav-group .nav-group-list .nav-link.active{\n  background: var(--primary-color) !important;\n  color: #fff !important;\n  box-shadow: 0 8px 16px rgba(234, 88, 12, 0.25);\n  border-radius: 6px !important; /* This is the fix */\n}\n/* ### END: MODIFICATION ### */\n\n.sidebar-nav .nav-group .nav-group-list .nav-link:hover{\n  background: rgba(234, 88, 12, 0.25);\n  color: #fff;\n}\n\n#toast-root {\n  position: fixed;\n  right: 20px;\n  bottom: 20px;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  z-index: 1100;\n}\n\n#toast-root {\n  left: 50% !important;\n  top: 50% !important;\n  transform: translate(-50%, -50%) !important;\n  right: auto !important;\n  bottom: auto !important;\n  align-items: center;\n}\n.create-order-layout .form-row-headers {\n  display: grid;\n  grid-template-columns: 1fr 120px 44px;\n  gap: 12px;\n  align-items: center;\n  font-size: 0.9rem;\n  color: #6B7280;\n  font-weight: 600;\n  margin-bottom: 8px;\n}\n\n.create-order-layout .product-row {\n  display: grid;\n  grid-template-columns: 1fr 120px 44px; /* dropdown | qty | icon */\n  gap: 12px;\n  align-items: center;\n  margin-bottom: 12px;\n}\n\n@media (max-width: 560px) {\n  .create-order-layout .form-row-headers,\n  .create-order-layout .product-row {\n    grid-template-columns: 1fr 100px 40px;\n    gap: 10px;\n  }\n}\n\n.create-order-layout .choices {\n  width: 100%;\n}\n.create-order-layout .choices__inner {\n  border-radius: 12px;\n  border: 1px solid #E5E7EB;\n  min-height: 44px;\n  padding: 6px 10px;\n  background: #fff;\n  box-shadow: none;\n}\n.create-order-layout .is-open .choices__inner {\n  border-color: #F97316;\n  box-shadow: 0 0 0 4px rgba(249,115,22,0.12);\n}\n.create-order-layout .choices__list--dropdown {\n  border-radius: 12px;\n  border-color: #E5E7EB;\n  overflow: hidden;\n}\n\n.create-order-layout .qty-input {\n  width: 100%;\n  height: 44px;\n  padding: 0 12px;\n  border: 1px solid #E5E7EB;\n  border-radius: 12px;\n  background: #fff;\n  color: #111827;\n  outline: none;\n}\n.create-order-layout .qty-input:focus {\n  border-color: #F97316;\n  box-shadow: 0 0 0 4px rgba(249,115,22,0.12);\n}\n\n.icon-btn {\n  width: 40px;\n  height: 40px;\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  border-radius: 999px;\n  border: 1px solid #E5E7EB;\n  background: #F3F4F6;\n  color: #6B7280;\n  cursor: pointer;\n  transition: background .15s ease, transform .06s ease;\n}\n.icon-btn:hover { background: #E5E7EB; }\n.icon-btn:active { transform: scale(0.98); }\n\n.icon-btn--danger {\n  background: #ff0000;\n  border-color: #FEE2E2;\n  color: #ffffff;\n}\n.icon-btn--danger:hover {\n  background: #d40000;\n}\n\n.btn-outline-pill {\n  display: inline-flex;\n  align-items: center;\n  gap: 8px;\n  padding: .65rem 1rem;\n  border-radius: 999px;\n  border: 1px solid #F59E0B; /* amber-ish outline to match theme */\n  color: #D97706;\n  background: #FFFBEB;\n  font-weight: 500;\n}\n.btn-outline-pill:hover {\n  background: #FEF3C7;\n  border-color: #F59E0B;\n}\n.btn-outline-pill svg {\n  width: 18px; height: 18px;\n}\n\n.actions-cell {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n.create-order-layout .choices__inner { \n  position: relative; \n}\n\n.create-order-layout .choices.is-loading .choices__inner:after {\n  content: '';\n  position: absolute;\n  right: 12px;\n  top: 50%;\n  width: 16px;\n  height: 16px;\n  margin-top: -8px;\n  border-radius: 50%;\n  border: 2px solid #F59E0B;\n  border-top-color: transparent;\n  animation: spin .6s linear infinite;\n  pointer-events: none;\n}\n\n@keyframes spin {\n  to { transform: rotate(360deg); }\n}\n\n.create-order-layout .choices__inner { position: relative; }\n.create-order-layout .choices.is-loading .choices__inner {\n  padding-left: 34px !important;\n}\n.create-order-layout .choices.is-loading .choices__inner:after {\n  content: '';\n  position: absolute;\n  left: 12px !important;\n  right: auto !important;\n  top: 50%;\n  width: 16px; height: 16px; margin-top: -8px;\n  border-radius: 50%;\n  border: 2px solid #F97316;\n  border-top-color: transparent;\n  animation: spin .6s linear infinite;\n  pointer-events: none;\n}\n@keyframes spin { to { transform: rotate(360deg); } }\n\n.btn-outline-pill {\n  display: inline-flex;\n  align-items: center;\n  flex-direction: row !important;\n  gap: 8px;\n  padding: .65rem 1rem;\n  border-radius: 999px;\n  border: 1px solid #F59E0B;\n  color: #F97316;\n  background: #FFFBEB;\n  font-weight: 500;\n}\n.btn-outline-pill:hover { background: #FEF3C7; border-color: #F59E0B; }\n.btn-outline-pill svg { width: 18px; height: 18px; stroke: #F97316; }\n\n.tip-callout {\n  display: inline-flex;\n  align-items: center;\n  justify-content: flex-start;\n  flex-direction: row !important;\n  gap: 10px;\n  margin-top: 8px;\n  padding: 10px 12px;\n  border-radius: 12px;\n  background: #FFF7ED;\n  border: 1px dashed #FDBA74;\n  color: #7C2D12;\n  text-align: left;\n  font-size: 0.95rem;\n}\n.tip-callout svg, .tip-callout i {\n  width: 18px; height: 18px; stroke: #F97316;\n}\n.tip-callout strong { color: #C2410C; }\n\n.create-order-layout #reasonInput,\n.create-order-layout textarea[name=\"reason\"],\n.create-order-layout input[name=\"reason\"],\n#reasonInput, textarea[name=\"reason\"] {\n  width: 100%;\n  min-height: 48px;\n  padding: 12px 14px;\n  border: 1px solid #E5E7EB;\n  border-radius: 12px;\n  background: #FFFFFF;\n  color: #111827;\n  outline: none;\n  resize: vertical;\n  transition: box-shadow .15s ease, border-color .15s ease;\n}\n.create-order-layout #reasonInput::placeholder,\n.create-order-layout textarea[name=\"reason\"]::placeholder,\n.create-order-layout input[name=\"reason\"]::placeholder {\n  color: #9CA3AF;\n}\n.create-order-layout #reasonInput:focus,\n.create-order-layout textarea[name=\"reason\"]:focus,\n.create-order-layout input[name=\"reason\"]:focus {\n  border-color: #F97316;\n  box-shadow: 0 0 0 4px rgba(249,115,22,0.12);\n}\n\n.create-order-layout .form-row-headers {\n  display: grid;\n  grid-template-columns: 1fr 120px 44px;\n  gap: 12px;\n  align-items: center;\n  font-size: 0.9rem;\n  color: #6B7280; font-weight: 600;\n  margin-bottom: 8px;\n}\n.create-order-layout .product-row {\n  display: grid;\n  grid-template-columns: 1fr 120px 44px;\n  gap: 12px; align-items: center; margin-bottom: 12px;\n}\n@media (max-width: 560px) {\n  .create-order-layout .form-row-headers,\n  .create-order-layout .product-row {\n    grid-template-columns: 1fr 100px 40px;\n    gap: 10px;\n  }\n}\n#toast-root {\n  left: 50% !important;\n  top: 50% !important;\n  transform: translate(-50%, -50%) !important;\n  right: auto !important;\n  bottom: auto !important;\n  align-items: center;\n}\n.sidebar { transform: none !important; }\n\nbody.sidebar-collapsed .sidebar {\n  transform: translateX(calc(-100% - 14px)) !important;\n}\n\n.main-content { padding-left: var(--aside-w) !important; }\nbody.sidebar-collapsed .main-content { padding-left: 0 !important; }\n\n@media (min-width: 769px){\n  body.sidebar-mini .sidebar { width: var(--aside-w-collapsed) !important; }\n}\n/* ===== Stocktaking Cards Layout ===== */\n.stock-group {\n  margin-bottom: 2.5rem; /* Space between tag groups */\n}\n\n.stock-group:last-child {\n  margin-bottom: 0;\n}\n\n.stock-group-title {\n  background-color: #111827; /* Black background */\n  color: #FFFFFF;             /* White text */\n  padding: 0.5rem 1rem;\n  border-radius: 8px;\n  margin-bottom: 1rem;\n  font-size: 1rem;\n  font-weight: 600;\n  display: inline-block; /* So it doesn't take full width */\n}\n\n.stock-cards-grid {\n  display: grid;\n  /* Creates as many columns as fit, with a minimum width of 250px */\n  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\n  gap: 1rem;\n}\n\n.stock-card {\n  background-color: #FFFFFF;\n  border: 1px solid var(--border-color);\n  border-radius: 12px;\n  padding: 1rem;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  box-shadow: 0 4px 12px rgba(0,0,0,0.05);\n  transition: transform 0.2s ease, box-shadow 0.2s ease;\n}\n\n.stock-card:hover {\n  transform: translateY(-3px);\n  box-shadow: 0 8px 16px rgba(0,0,0,0.08);\n}\n\n.stock-card-name {\n  font-weight: 600;\n  color: var(--text-primary);\n}\n\n.stock-card-qty {\n  font-weight: 700;\n  font-size: 1.1rem;\n  background-color: #F3F4F6;\n  color: var(--text-primary);\n  padding: 0.25rem 0.75rem;\n  border-radius: 999px; /* Pill shape */\n}\n\n/* ===== Review Page Enhancements ===== */\n.card--elevated {\n  border: 1px solid rgba(0,0,0,0.06);\n  border-radius: 16px;\n  box-shadow: 0 8px 24px rgba(0,0,0,0.06);\n  background: var(--card-bg, #fff);\n}\n\n/* Summary (Reason + Total) */\n.review-summary-card { padding: 1.25rem 1.25rem; margin-bottom: 1rem; }\n.review-summary-card .section-title {\n  margin: 0 0 .75rem 0;\n  font-size: 1.25rem;\n  color: var(--text-primary, #111827);\n}\n.summary-grid { display: grid; gap: .75rem; grid-template-columns: 1fr; }\n@media (min-width: 768px) { .summary-grid { grid-template-columns: repeat(2, 1fr); } }\n.summary-item {\n  background: var(--surface, #fff);\n  border: 1px solid #E5E7EB;\n  border-radius: 12px;\n  padding: .875rem 1rem;\n  box-shadow: 0 4px 12px rgba(0,0,0,0.04);\n}\n.summary-label {\n  font-size: .85rem;\n  font-weight: 600;\n  color: var(--text-muted, #6B7280);\n}\n.summary-value {\n  display: block;\n  margin-top: 4px;\n  font-size: 1.05rem;\n  font-weight: 700;\n  color: var(--text-primary, #111827);\n  word-break: break-word;\n}\n\n/* Products Section */\n.products-card { margin-top: 1rem; padding: 1.25rem 1.25rem; }\n.products-card .products-list-title { margin: 0 0 .75rem 0; font-size: 1.1rem; }\n\n.product-cards-grid { display: grid; grid-template-columns: 1fr; gap: 12px; }\n@media (min-width: 768px) { .product-cards-grid { grid-template-columns: 1fr 1fr; } }\n\n.product-card {\n  background: var(--surface, #fff);\n  border: 1px solid #E5E7EB;\n  border-radius: 14px;\n  padding: .9rem 1rem;\n  box-shadow: 0 6px 16px rgba(0,0,0,0.06);\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  gap: 10px;\n}\n\n/* Badges (labels) */\n.badge {\n  display: inline-flex;\n  align-items: center;\n  gap: 6px;\n  font-weight: 700;\n  font-size: .95rem;\n  padding: .35rem .75rem;\n  border-radius: 999px;\n  border: 1px solid transparent;\n  white-space: nowrap;\n}\n.badge--name {\n  background: #EEF2FF;      /* indigo-50 */\n  color: #3730A3;           /* indigo-800 */\n  border-color: #C7D2FE;    /* indigo-200 */\n}\n.badge--qty {\n  background: #ECFDF5;      /* emerald-50 */\n  color: #065F46;           /* emerald-900 */\n  border-color: #A7F3D0;    /* emerald-200 */\n}\n\n/* ===== Modern Toasts (Reusable) ===== */\n:root {\n  --toast-radius: 14px;\n  --toast-shadow: 0 18px 40px rgba(0,0,0,.12), 0 2px 10px rgba(0,0,0,.06);\n  --toast-bg: #fff;\n  --toast-border: #E5E7EB;\n  --toast-text: #111827;\n  --toast-muted: #6B7280;\n\n  --toast-success: #10B981;\n  --toast-success-50: #ECFDF5;\n  --toast-success-200: #A7F3D0;\n\n  --toast-error: #EF4444;\n  --toast-error-50: #FEF2F2;\n  --toast-error-200: #FECACA;\n\n  --toast-info: #3B82F6;\n  --toast-info-50: #EFF6FF;\n  --toast-info-200: #BFDBFE;\n}\n\n.toast-stack {\n  position: fixed;\n  top: 22px;\n  right: 22px;\n  width: min(420px, calc(100vw - 28px));\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  z-index: 9999;\n  pointer-events: none;\n}\n@media (max-width: 560px) {\n  .toast-stack { right: 14px; left: 14px; width: auto; }\n}\n\n.toast {\n  pointer-events: auto;\n  display: grid;\n  grid-template-columns: auto 1fr auto;\n  align-items: center;\n  gap: 12px;\n  padding: 12px 14px;\n  background: var(--toast-bg);\n  border: 1px solid var(--toast-border);\n  border-radius: var(--toast-radius);\n  box-shadow: var(--toast-shadow);\n  color: var(--toast-text);\n  opacity: 0;\n  transform: translateY(-8px) scale(.98);\n  transition: transform .22s ease, opacity .22s ease, box-shadow .2s ease;\n}\n.toast.is-in {\n  opacity: 1;\n  transform: translateY(0) scale(1);\n}\n.toast__icon {\n  width: 28px; height: 28px;\n  border-radius: 999px;\n  display: grid; place-items: center;\n  font-size: 0; /* hide text if any */\n}\n.toast__content { min-width: 0; }\n.toast__title {\n  font-weight: 700;\n  font-size: .98rem;\n  line-height: 1.2;\n}\n.toast__msg {\n  margin-top: 2px;\n  color: var(--toast-muted);\n  font-size: .9rem;\n  line-height: 1.3;\n  overflow: hidden; text-overflow: ellipsis;\n  display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical;\n}\n.toast__close {\n  border: 0; background: transparent; color: #6B7280;\n  width: 28px; height: 28px; border-radius: 8px;\n  display: grid; place-items: center; cursor: pointer;\n}\n.toast__close:hover { background: #F3F4F6; color: #111827; }\n\n/* Variants */\n.toast--success .toast__icon { background: var(--toast-success-50); color: var(--toast-success); border: 1px solid var(--toast-success-200); }\n.toast--error   .toast__icon { background: var(--toast-error-50);   color: var(--toast-error);   border: 1px solid var(--toast-error-200); }\n.toast--info    .toast__icon { background: var(--toast-info-50);    color: var(--toast-info);    border: 1px solid var(--toast-info-200); }\n\n/* Reduce motion */\n@media (prefers-reduced-motion: reduce) {\n  .toast { transition: none; }\n  .toast.is-in { opacity: 1; transform: none; }\n}\n/* ===== Centered Toast (middle of the screen) ===== */\n.toast-stack {\n  top: 50% !important;\n  left: 50% !important;\n  right: auto !important;\n  transform: translate(-50%, -50%) !important;\n  width: min(500px, calc(100vw - 32px));\n  z-index: 9999;\n}\n\n/* أنيميشن لطيف يناسب المركز بدل السقوط من فوق */\n.toast {\n  transform: scale(.96);\n}\n.toast.is-in {\n  transform: scale(1);\n}\n\n/* موبايل */\n@media (max-width: 560px) {\n  .toast-stack {\n    width: calc(100vw - 28px);\n  }\n}\n/* ===== Stocktaking: Tag column ===== */\n.stock-table .col-tag { width: 180px; }\n\n.loading-cell,\n.empty-cell {\n  text-align: center;\n  color: #6B7280;\n  padding: 1rem;\n}\n\n/* Tag badge (Notion-like) */\n.tag-pill {\n  display: inline-flex;\n  align-items: center;\n  padding: .25rem .6rem;\n  border-radius: 999px;\n  font-size: .85rem;\n  font-weight: 700;\n  border: 1px solid transparent;\n  box-shadow: 0 6px 16px rgba(0,0,0,0.06);\n  white-space: nowrap;\n}\n\n/* Notion select colors */\n.tag--default { background: #F3F4F6; color: #111827; border-color: #E5E7EB; }\n.tag--gray    { background: #F3F4F6; color: #374151; border-color: #E5E7EB; }\n.tag--brown   { background: #EFEBE9; color: #4E342E; border-color: #D7CCC8; }\n.tag--orange  { background: #FFF7ED; color: #9A3412; border-color: #FED7AA; }\n.tag--yellow  { background: #FEFCE8; color: #854D0E; border-color: #FDE68A; }\n.tag--green   { background: #ECFDF5; color: #065F46; border-color: #A7F3D0; }\n.tag--blue    { background: #EFF6FF; color: #1E40AF; border-color: #BFDBFE; }\n.tag--purple  { background: #F5F3FF; color: #5B21B6; border-color: #DDD6FE; }\n.tag--pink    { background: #FDF2F8; color: #9D174D; border-color: #FBCFE8; }\n.tag--red     { background: #FEF2F2; color: #991B1B; border-color: #FECACA; }\n/* ====== Grouped Stocktaking ====== */\n.groups-grid {\n  display: grid;\n  grid-template-columns: 1fr;\n  gap: 16px;\n}\n.loading-block, .empty-block, .error-block {\n  padding: 1rem;\n  color: #6B7280;\n}\n.error-block { color: #B91C1C; background: #FEE2E2; border: 1px solid #FCA5A5; border-radius: 12px; }\n\n.group-card {\n  --group-accent-bg: #F9FAFB;\n  --group-accent-text: #111827;\n  --group-accent-border: #E5E7EB;\n\n  border: 1px solid rgba(0,0,0,0.06);\n  border-radius: 16px;\n  box-shadow: 0 12px 30px rgba(0,0,0,0.06);\n  background: #fff;\n  overflow: hidden;\n}\n\n.group-card__head {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: .9rem 1rem;\n  border-bottom: 1px solid var(--group-accent-border);\n  background:\n    linear-gradient(90deg, var(--group-accent-bg) 0%, rgba(255,255,255,0) 60%);\n}\n.group-title {\n  font-size: .85rem;\n  font-weight: 700;\n  color: var(--text-muted, #6B7280);\n  margin-right: .5rem;\n}\n.group-head-left { display: flex; align-items: center; gap: .5rem; }\n.group-count {\n  font-weight: 700;\n  color: var(--text-primary, #111827);\n  background: #F3F4F6;\n  border: 1px solid #E5E7EB;\n  padding: .25rem .6rem;\n  border-radius: 999px;\n  font-size: .85rem;\n}\n\n/* Table inside each group */\n.group-table-wrap { width: 100%; overflow-x: auto; }\n.group-table {\n  width: 100%;\n  border-collapse: separate;\n  border-spacing: 0;\n}\n.group-table thead th {\n  text-align: left;\n  padding: .7rem .9rem;\n  font-weight: 800;\n  font-size: .9rem;\n  color: var(--group-accent-text);\n  background: var(--group-accent-bg);\n  border-bottom: 1px solid var(--group-accent-border);\n}\n.group-table thead th:first-child { border-top-left-radius: 10px; }\n.group-table thead th:last-child  { border-top-right-radius: 10px; }\n\n.group-table tbody td {\n  padding: .65rem .9rem;\n  border-bottom: 1px solid #F3F4F6;\n}\n.group-table tbody tr:hover td {\n  background: #FAFAFA;\n}\n.group-table .col-num { text-align: right; width: 120px; }\n.group-table .col-tag { width: 180px; }\n\n/* Tag badge (reuse + shadow) */\n.tag-pill {\n  display: inline-flex;\n  align-items: center;\n  padding: .25rem .6rem;\n  border-radius: 999px;\n  font-size: .85rem;\n  font-weight: 700;\n  border: 1px solid transparent;\n  box-shadow: 0 6px 16px rgba(0,0,0,0.06);\n  white-space: nowrap;\n}\n\n/* Notion-like colors */\n.tag--default { background: #F3F4F6; color: #111827; border-color: #E5E7EB; }\n.tag--gray    { background: #F3F4F6; color: #374151; border-color: #E5E7EB; }\n.tag--brown   { background: #EFEBE9; color: #4E342E; border-color: #D7CCC8; }\n.tag--orange  { background: #FFF7ED; color: #9A3412; border-color: #FED7AA; }\n.tag--yellow  { background: #FEFCE8; color: #854D0E; border-color: #FDE68A; }\n.tag--green   { background: #ECFDF5; color: #065F46; border-color: #A7F3D0; }\n.tag--blue    { background: #EFF6FF; color: #1E40AF; border-color: #BFDBFE; }\n.tag--purple  { background: #F5F3FF; color: #5B21B6; border-color: #DDD6FE; }\n.tag--pink    { background: #FDF2F8; color: #9D174D; border-color: #FBCFE8; }\n.tag--red     { background: #FEF2F2; color: #991B1B; border-color: #FECACA; }\n/* ===== Grouped Stocktaking (updates) ===== */\n.group-table thead th {\n  text-align: left;\n  padding: .7rem .9rem;\n  font-weight: 800;\n  font-size: .9rem;\n  color: var(--group-accent-text);\n  background: var(--group-accent-bg);\n  border-bottom: 1px solid var(--group-accent-border);\n}\n.group-table .col-num { text-align: right; width: 120px; }\n.group-table .col-kit { text-align: right; width: 180px; }\n\n/* Badge for \"One Kit Quantity\" (ملون حسب لون الجروب) */\n.qty-pill {\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  min-width: 52px;\n  padding: .28rem .6rem;\n  border-radius: 999px;\n  font-size: .85rem;\n  font-weight: 800;\n  color: var(--group-accent-text);\n  background: var(--group-accent-bg);\n  border: 1px solid var(--group-accent-border);\n  box-shadow: 0 6px 16px rgba(0,0,0,0.06);\n}\n\n/* ===== Download PDF button ===== */\n.card-toolbar {\n  display: flex;\n  justify-content: flex-end;\n  align-items: center;\n  margin-bottom: .75rem;\n}\n.btn {\n  display: inline-flex;\n  align-items: center;\n  gap: 8px;\n  padding: .55rem .9rem;\n  border-radius: 10px;\n  font-weight: 700;\n  border: 1px solid #E5E7EB;\n  background: #fff;\n  color: #111827;\n  box-shadow: 0 8px 20px rgba(0,0,0,.06);\n  cursor: pointer;\n  transition: transform .12s ease, box-shadow .12s ease, background .12s ease;\n}\n.btn:hover { transform: translateY(-1px); box-shadow: 0 12px 26px rgba(0,0,0,.08); }\n.btn.is-busy { opacity: .7; cursor: wait; }\n.btn.btn--light { background: #fff; }\n.btn svg { width: 18px; height: 18px; }\n\n/* ===== Orders Modal (polished + centered close icon) ===== */\n#orderModal .modal-content {\n  position: relative;\n  width: min(680px, 94vw);\n  border-radius: 16px;\n  padding: 14px 14px 16px;\n  background: #fff;\n  box-shadow: 0 24px 48px rgba(0,0,0,.18), 0 4px 16px rgba(0,0,0,.08);\n}\n\n/* Header uses Flex so the close button is vertically centered */\n.order-modal__head {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  gap: .5rem;\n  padding: .5rem .5rem;\n  border-bottom: 1px solid #F3F4F6;\n}\n.order-modal__title {\n  display: inline-flex; align-items: center; gap: .5rem;\n  font-size: 1.05rem; font-weight: 800; color: #111827;\n}\n.order-modal__title svg { width: 18px; height: 18px; color: #6B7280; }\n\n/* Default (fallback) absolute positioning if the close button is NOT in header */\n#orderModal .close-btn {\n  position: absolute;\n  top: 10px; right: 12px;\n  width: 32px; height: 32px;\n  display: grid; place-items: center;\n  border: 0; border-radius: 8px;\n  background: #F3F4F6; color: #111827;\n  cursor: pointer; line-height: 1;\n  box-shadow: 0 4px 10px rgba(0,0,0,.06);\n}\n#orderModal .close-btn svg { width: 18px; height: 18px; }\n#orderModal .close-btn:hover { background: #E5E7EB; }\n\n/* When the close button is placed inside the header (via JS), center it with Flex */\n#orderModal .order-modal__head .close-btn {\n  position: static;\n  transform: none;\n  margin-left: auto;\n}\n\n/* List */\n.order-modal__list { display: grid; gap: 10px; margin-top: .75rem; }\n\n/* Order item card */\n.order-item-card {\n  display: flex; align-items: center; justify-content: space-between;\n  gap: 10px;\n  padding: .6rem .75rem;\n  background: #fff;\n  border: 1px solid #E5E7EB;\n  border-radius: 12px;\n  box-shadow: 0 8px 20px rgba(0,0,0,.06);\n}\n.order-item__left { min-width: 0; }\n.order-item__right { display: inline-flex; align-items: center; gap: 8px; flex-shrink: 0; }\n\n/* Badges */\n.badge {\n  display: inline-flex; align-items: center; gap: 6px;\n  font-weight: 700; font-size: .9rem;\n  padding: .35rem .7rem; border-radius: 999px;\n  border: 1px solid transparent; white-space: nowrap;\n  box-shadow: 0 6px 16px rgba(0,0,0,.06);\n}\n.badge--name { background: #EEF2FF; color: #3730A3; border-color: #C7D2FE; }\n.badge--qty  { background: #ECFDF5; color: #065F46; border-color: #A7F3D0; }\n\n/* Receive button */\n.receive-btn {\n  border: 1px solid #E5E7EB; background: #fff; color: #111827;\n  font-weight: 700; padding: .35rem .6rem; border-radius: 10px; cursor: pointer;\n  box-shadow: 0 6px 16px rgba(0,0,0,.06);\n  transition: transform .12s ease, box-shadow .12s ease, background .12s ease;\n}\n.receive-btn:hover { transform: translateY(-1px); box-shadow: 0 10px 24px rgba(0,0,0,.08); }\n.receive-btn.received, .receive-btn:disabled {\n  background: #10B981; color: #fff; border-color: #0EA575;\n  cursor: default; box-shadow: 0 6px 16px rgba(16,185,129,.25);\n}\n/* اختياري: لف لكل الروابط الطويلة */\n.sidebar .nav-group-list .nav-link .nav-label { white-space: normal; line-height: 1.15; }\n.sidebar .nav-group-list .nav-link { align-items: flex-start; }\n/* Sidebar: flat links (no parent group) */\n.sidebar-nav .nav-group { display: none !important; }\n\n.sidebar-nav .nav-list {\n  list-style: none;\n  margin: 0;\n  padding: 1rem;\n  display: grid;\n  gap: 6px;\n}\n\n.sidebar-nav .nav-list .nav-link {\n  display: flex;\n  align-items: flex-start; /* يسمح للنص يلف */\n  gap: .75rem;\n  padding: .65rem 1rem;\n  border-radius: 6px;\n  text-decoration: none;\n  color: #9CA3AF;\n  transition: background-color .2s, color .2s;\n}\n\n.sidebar-nav .nav-list .nav-link:hover {\n  background: #1F2937;\n  color: #fff;\n}\n\n.sidebar-nav .nav-list .nav-link.active {\n  background: var(--primary-color);\n  color: #fff;\n  font-weight: 600;\n  box-shadow: 0 8px 16px rgba(234, 88, 12, 0.25);\n}\n\n.sidebar-nav .nav-list .nav-link svg {\n  width: 18px; height: 18px;\n  stroke-width: 2;\n  flex-shrink: 0;\n  margin-top: 2px;\n}\n\n.sidebar-nav .nav-list .nav-link .nav-label {\n  white-space: normal; /* لف الاسم الطويل */\n  line-height: 1.15;\n}\n\n/* وضع mini على الديسكتوب */\n@media (min-width: 769px) {\n  body.sidebar-mini .sidebar { width: var(--aside-w-collapsed) !important; }\n  body.sidebar-mini .main-content { padding-left: var(--aside-w-collapsed) !important; }\n\n  body.sidebar-mini .sidebar-header h2 { display: none; }\n  body.sidebar-mini .nav-label { display: none !important; }\n  body.sidebar-mini .sidebar-nav .nav-link { justify-content: center; }\n  body.sidebar-mini .sidebar-footer .logout-btn { justify-content: center; }\n  body.sidebar-mini .sidebar-toggle svg { transform: rotate(180deg); }\n}\n\n/* وضع collapsed على الموبايل موجود بالفعل في ملفك */\n/* Override: أظهر الـ nav-group لو كانت قاعدة سابقة مخبيّاه */\n.sidebar-nav .nav-group { display: block !important; }\n\n/* لفّ النص داخل عناصر مجموعة Orders لو الاسم طويل */\n.sidebar .nav-group-list .nav-link .nav-label { white-space: normal; line-height: 1.15; }\n/* Icons alignment */\n.nav-icon, .title-icon {\n  width: 18px; height: 18px; vertical-align: -2px; margin-right: 8px;\n}\n\n/* Actions bar and muted text */\n.page-actions { display: flex; gap: 10px; align-items: center; margin: 12px 0 14px; }\n.muted { color: #6B7280; }\n\n/* Stats cards */\n.stats { display: grid; grid-template-columns: repeat(3, minmax(0, 1fr)); gap: 10px; margin-bottom: 12px; }\n.stat { background:#fff; border:1px solid #E5E7EB; border-radius:10px; padding:10px 12px; }\n.stat__label { font-size:12px; color:#6B7280; margin-bottom:4px; }\n.stat__value { font-size:18px; font-weight:700; color:#111827; }\n.stat__value--ok   { color:#047857; }\n.stat__value--warn { color:#B45309; }\n\n/* Pills */\n.pill { display:inline-block; padding:2px 8px; border-radius:999px; font-size:12px; line-height:18px; }\n.pill--success { background:#ECFDF5; color:#065F46; border:1px solid #A7F3D0; }\n.pill--danger  { background:#FEF2F2; color:#991B1B; border:1px solid #FECACA; }\n\n/* Row done */\n.table tr.row--done { opacity: 0.75; }\n.table tr.row--done td { background-image: linear-gradient(to right, rgba(16,185,129,0.08), rgba(16,185,129,0)); }\n\n/* Buttons */\n.btn-icon i { margin-right: 6px; }\n.btn-success { background:#16A34A; color:#fff; border:1px solid #16A34A; }\n.btn-success:hover { background:#15803D; border-color:#15803D; }\n.btn-warning { background:#F59E0B; color:#111827; border:1px solid #D97706; }\n.btn-warning.btn-outline { background:transparent; color:#B45309; border:1px solid #F59E0B; }\n.btn-primary { background:#2563EB; color:#fff; border:1px solid #2563EB; }\n.btn-primary:hover { background:#1D4ED8; border-color:#1D4ED8; }\n.btn.is-busy { opacity: 0.7; pointer-events:none; }\n\n/* Button group */\n.btn-group { display:flex; gap:8px; justify-content:center; flex-wrap:wrap; }\n\n/* Modal */\n.modal.hidden { display:none; }\n.modal { position:fixed; inset:0; z-index:1000; }\n.modal__backdrop { position:absolute; inset:0; background:rgba(0,0,0,0.4); }\n.modal__dialog { position:relative; margin: 7vh auto 0; max-width: 420px; background:#fff; border-radius:12px; border:1px solid #E5E7EB; box-shadow: 0 10px 30px rgba(0,0,0,0.15); }\n.modal__header { display:flex; align-items:center; justify-content:space-between; padding:12px 14px; border-bottom:1px solid #F3F4F6; }\n.modal__body { padding:14px; }\n.modal__footer { padding:12px 14px; display:flex; justify-content:flex-end; gap:8px; border-top:1px solid #F3F4F6; }\n.modal__close { background:transparent; border:0; font-size:20px; line-height:1; cursor:pointer; }\n.input { width:100%; padding:8px 10px; border:1px solid #E5E7EB; border-radius:8px; font-size:14px; }\n.hint { color:#6B7280; }\n/* Assigned cards grid */\n.assigned-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(360px, 1fr));\n  gap: 12px;\n}\n@media (max-width: 480px) {\n  .assigned-grid { grid-template-columns: 1fr; }\n}\n\n/* Order card */\n.order-card {\n  background: #fff;\n  border: 1px solid #E5E7EB;\n  border-radius: 12px;\n  box-shadow: 0 1px 3px rgba(0,0,0,.1), 0 1px 2px -1px rgba(0,0,0,.1);\n  overflow: hidden;\n}\n.order-card__head {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  gap: 10px;\n  padding: 10px 12px;\n  border-bottom: 1px solid #F3F4F6;\n  background: #FAFAFA;\n}\n.order-card__title { display: flex; align-items: center; gap: 10px; }\n.order-card__title svg { width: 18px; height: 18px; }\n.order-card__title-text { display: flex; flex-direction: column; }\n.order-card__title-main { font-weight: 800; color: #111827; }\n.order-card__subtitle { font-size: 12px; color: #6B7280; }\n.order-card__right { display: flex; align-items: center; gap: 8px; flex-wrap: wrap; }\n\n.badge { display:inline-flex; align-items:center; gap:6px; font-weight:700; font-size:.85rem; padding:.3rem .6rem; border-radius:999px; border:1px solid #E5E7EB; background:#fff; }\n.badge--count   { background:#F3F4F6; color:#111827; }\n.badge--missing { background:#FEF2F2; color:#991B1B; border-color:#FECACA; }\n\n.order-card__items { display: grid; gap: 6px; padding: 10px 12px; }\n.order-item {\n  display: grid;\n  grid-template-columns: 1fr auto auto; /* name | nums | actions */\n  gap: 12px;\n  align-items: center;\n  background: #fff;\n  border: 1px solid #F3F4F6;\n  border-radius: 10px;\n  padding: .6rem .75rem;\n}\n.item-left .item-name { font-weight: 700; color: #111827; overflow-wrap: anywhere; }\n.item-mid { display: inline-flex; gap: 12px; align-items: center; color: #374151; }\n.item-mid .num strong { font-weight: 800; }\n.item-actions { display: inline-flex; gap: 8px; align-items: center; }\n\n/* Small buttons variant (visual only) */\n.btn-sm { padding: .4rem .6rem; border-radius: 8px; font-size: .85rem; }\n\n/* Popover */\n.popover.hidden { display: none; }\n.popover {\n  position: fixed;\n  z-index: 1100;\n  width: 260px;\n  background: #fff;\n  border: 1px solid #E5E7EB;\n  border-radius: 12px;\n  box-shadow: 0 12px 30px rgba(0,0,0,.12);\n}\n.popover__body { padding: 12px; }\n.popover__title {\n  display: inline-flex; align-items: center; gap: 6px;\n  font-weight: 800; color: #111827; margin-bottom: 6px;\n}\n.popover__label { display:block; font-weight:600; font-size:.85rem; margin:6px 0 4px; color:#374151; }\n.popover__actions { margin-top: 10px; display: flex; justify-content: flex-end; gap: 8px; }\n/* Assigned: إجبار عرض الكروت عمود واحد */\n.assigned-grid {\n  display: grid;\n  grid-template-columns: 1fr !important; /* عمود واحد على كل المقاسات */\n  gap: 12px;\n}\n\n.assigned-grid .order-card {\n  width: 100%;\n}\n\n/* ===== Funds Page Styles ===== */\n.card-header {\n  margin-bottom: 1.5rem;\n  border-bottom: 1px solid #F3F4F6;\n  padding-bottom: 1rem;\n}\n\n.card-header h2 {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  margin: 0 0 0.5rem 0;\n  color: var(--primary-color);\n  font-size: 1.25rem;\n  font-weight: 700;\n}\n\n.card-header h2 i {\n  width: 20px;\n  height: 20px;\n  color: var(--primary-color);\n}\n\n.card-subtitle {\n  color: var(--text-secondary);\n  font-size: 0.9rem;\n  margin: 0;\n}\n\n.form-container {\n  display: grid;\n  gap: 1.5rem;\n}\n\n.form-label {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  font-weight: 600;\n  margin-bottom: 0.5rem;\n  color: var(--text-primary);\n}\n\n.form-label i {\n  width: 16px;\n  height: 16px;\n  color: var(--text-secondary);\n}\n\n.form-input,\n.form-select {\n  width: 100%;\n  padding: 0.75rem;\n  border: 1px solid #E5E7EB;\n  border-radius: 8px;\n  font-size: 1rem;\n  background: #fff;\n  transition: border-color 0.15s ease, box-shadow 0.15s ease;\n}\n\n.form-input:focus,\n.form-select:focus {\n  border-color: var(--primary-color);\n  box-shadow: 0 0 0 3px rgba(234,88,12,0.1);\n  outline: none;\n}\n\n.expenses-section {\n  background: #FAFAFA;\n  border: 1px solid #F3F4F6;\n  border-radius: 12px;\n  padding: 1.25rem;\n}\n\n.section-header {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: 1rem;\n}\n\n.section-header h3 {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  margin: 0;\n  color: var(--text-primary);\n  font-size: 1.1rem;\n  font-weight: 700;\n}\n\n.section-header h3 i {\n  width: 18px;\n  height: 18px;\n  color: var(--text-secondary);\n}\n\n.expenses-list {\n  display: grid;\n  gap: 1rem;\n}\n\n.expense-entry {\n  background: #fff;\n  border: 1px solid #E5E7EB;\n  border-radius: 12px;\n  padding: 1rem;\n  box-shadow: 0 1px 3px rgba(0,0,0,0.1);\n}\n\n.expense-header {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: 1rem;\n  padding-bottom: 0.75rem;\n  border-bottom: 1px solid #F3F4F6;\n}\n\n.expense-header h4 {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  margin: 0;\n  color: var(--text-primary);\n  font-size: 1rem;\n  font-weight: 600;\n}\n\n.expense-header h4 i {\n  width: 16px;\n  height: 16px;\n  color: var(--text-secondary);\n}\n\n.form-row {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 1rem;\n  margin-bottom: 1rem;\n}\n\n@media (max-width: 768px) {\n  .form-row {\n    grid-template-columns: 1fr;\n  }\n}\n\n.btn-icon {\n  width: 36px;\n  height: 36px;\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  border-radius: 8px;\n  border: 1px solid #E5E7EB;\n  background: #F9FAFB;\n  color: #6B7280;\n  cursor: pointer;\n  transition: all 0.15s ease;\n}\n\n.btn-icon:hover {\n  background: #F3F4F6;\n  color: var(--text-primary);\n}\n\n.btn-danger {\n  background: #FEE2E2;\n  border-color: #FECACA;\n  color: #DC2626;\n}\n\n.btn-danger:hover {\n  background: #FECACA;\n  color: #B91C1C;\n}\n\n.btn-secondary {\n  background: #F9FAFB;\n  color: var(--text-secondary);\n  border: 1px solid #E5E7EB;\n  padding: 0.65rem 1rem;\n  border-radius: 8px;\n  font-weight: 500;\n  transition: all 0.15s ease;\n}\n\n.btn-secondary:hover {\n  background: #F3F4F6;\n  color: var(--text-primary);\n}\n\n.form-help {\n  display: block;\n  margin-top: 0.25rem;\n  font-size: 0.85rem;\n  color: var(--text-secondary);\n}\n\n.remove-expense {\n  flex-shrink: 0;\n}\n\n@media (max-width: 480px) {\n  .section-header {\n    flex-direction: column;\n    align-items: flex-start;\n    gap: 0.75rem;\n  }\n\n  .expense-header {\n    flex-direction: column;\n    align-items: flex-start;\n    gap: 0.5rem;\n  }\n}\n\n/* Trash icon inside the red delete box */\n.expense-status {\n  width: 36px;\n  height: 28px;\n  background: #ff0000;\n  border: 1px solid #EF4444;\n  border-radius: 8px;\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n  transition: transform .12s ease, filter .15s ease;\n  background-image: url(\"data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='%23fff' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'><path d='M3 6h18'/><path d='M8 6V5a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v1'/><rect x='6' y='6' width='12' height='14' rx='2' ry='2' fill='none'/><path d='M10 11v6'/><path d='M14 11v6'/></svg>\");\n  background-repeat: no-repeat;\n  background-position: center;\n  background-size: 16px 16px;\n}\n.expense-status:hover { transform: translateY(-1px); filter: brightness(0.98); }\n\n/* File input unified border (solid) */\ninput[type=\"file\"].form-input {\n  padding: 0;\n  background: #fff;\n  border: 1px solid #E5E7EB;\n  border-radius: 8px;\n  overflow: hidden;\n}\n/* File input — dashed wrapper + orange button (original style) */\ninput[type=\"file\"].form-input {\n  padding: 0;\n  background: #fff;\n  border: 1px dashed #E5E7EB;\n  border-radius: 10px;\n  overflow: hidden;\n}\n\n/* الزرار البرتقالي */\ninput[type=\"file\"].form-input::file-selector-button {\n  padding: .65rem 1rem;\n  margin-right: 1rem;\n  border: 0;\n  border-right: 1px solid #E5E7EB;\n  border-radius: 10px 0 0 10px;\n  background: var(--primary-color);\n  color: #fff;\n  font-weight: 600;\n  cursor: pointer;\n  transition: filter .15s ease, transform .1s ease;\n}\n\ninput[type=\"file\"].form-input:hover::file-selector-button { filter: brightness(0.95); }\ninput[type=\"file\"].form-input:active::file-selector-button { transform: translateY(1px); }\n\n/* Safari/old WebKit fallback */\ninput[type=\"file\"].form-input::-webkit-file-upload-button {\n  padding: .65rem 1rem;\n  margin-right: 1rem;\n  border: 0;\n  border-right: 1px solid #E5E7EB;\n  border-radius: 10px 0 0 10px;\n  background: var(--primary-color);\n  color: #fff;\n  font-weight: 600;\n  cursor: pointer;\n}\n/* --- Sidebar mini: shift icons further left --- */\nbody.sidebar-mini .sidebar-nav { padding-left: 6px; }\n\nbody.sidebar-mini .sidebar-nav .nav-link {\n  justify-content: flex-start !important; /* بدل center */\n  align-items: center;\n  padding-left: 13px !important;          /* اقتراب للأيسر */\n  gap: 0.25rem;                           /* مسافة صغيرة حول الأيقونة */\n}\n\nbody.sidebar-mini .sidebar-nav .nav-link svg,\nbody.sidebar-mini .sidebar-nav .nav-link .icon {\n  margin: 0;\n  display: block;\n}\n\n/* Enhance Choices.js remove button for selected members */\n.choices__list--multiple .choices__item {\n  display: inline-flex;\n  align-items: center;\n  gap: 6px;\n  padding-right: 0.75rem;\n}\n.choices__list--multiple .choices__item .choices__button {\n  margin-left: 4px;\n  border-left: 0;\n  background: transparent;\n  opacity: .7;\n}\n.choices__list--multiple .choices__item .choices__button:hover { opacity: 1; }\n\n\n/* === CHOICES chips: inline white X next to name (no 'Remove' text) === */\n.choices__list--multiple .choices__item{\n  display: inline-flex;\n  align-items: center;\n  gap: 6px;\n  padding-right: 10px; /* room for X gap */\n}\n\n.choices__list--multiple .choices__item .choices__button{\n  position: static;            /* keep it inline beside the name */\n  margin-left: 6px;\n  width: 16px;\n  height: 16px;\n  padding: 0;\n  border: 0;\n  background: transparent !important;\n  background-image: none !important;\n  overflow: hidden;\n  text-indent: -9999px;        /* hide 'Remove item' text completely */\n  opacity: 1 !important;\n  cursor: pointer;\n}\n\n/* draw the white X via pseudo element */\n.choices__list--multiple .choices__item .choices__button::before{\n  content: '×';\n  text-indent: 0;\n  display: block;\n  width: 16px; height: 16px;\n  line-height: 16px;\n  font-weight: 700;\n  font-size: 16px;\n  color: #ffffff;              /* white icon */\n  text-align: center;\n  filter: drop-shadow(0 1px 1px rgba(0,0,0,.35));\n}\n.choices__list--multiple .choices__item .choices__button:hover::before{\n  transform: scale(1.05);\n}\n\n\n/* === FIX v2: Choices multi-select remove \"X\" (white, inline, always visible) === */\n.choices__list--multiple .choices__item{\n  display: inline-flex !important;\n  align-items: center !important;\n  gap: 6px !important;\n  padding-right: 8px !important;\n}\n\n.choices__list--multiple .choices__item .choices__button{\n  display: inline-block !important;   /* force visible */\n  position: static !important;        /* inline next to name */\n  margin-left: 2px !important;\n  width: 16px !important;\n  height: 16px !important;\n  min-width: 16px !important;\n  min-height: 16px !important;\n  line-height: 16px !important;\n  padding: 0 !important;\n  border: 0 !important;\n  background: transparent !important;\n  background-image: url(\"data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 12 12' fill='none' stroke='%23ffffff' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'><path d='M1 1L11 11M11 1L1 11'/></svg>\") !important;\n  background-repeat: no-repeat !important;\n  background-position: center !important;\n  background-size: 12px 12px !important;\n  color: transparent !important;      /* hide any text */\n  text-indent: -9999px !important;    /* hide 'Remove item' */\n  opacity: 1 !important;\n  cursor: pointer !important;\n  box-shadow: none !important;\n}\n/* remove any previous pseudo content */\n.choices__list--multiple .choices__item .choices__button::before,\n.choices__list--multiple .choices__item .choices__button::after{ content: none !important; }\n/* === FORCE white inline X inside multi-select chips (Choices.js) === */\n/* This overrides any previous attempts */\n\n.choices__list--multiple .choices__item{\n  display: inline-flex !important;\n  align-items: center !important;\n  gap: 6px !important;\n  padding-right: 8px !important;\n}\n\n.choices__list--multiple .choices__item .choices__button{\n  position: static !important;      /* keep next to name */\n  margin-left: 2px !important;\n  width: 16px !important;\n  height: 16px !important;\n  line-height: 16px !important;\n  padding: 0 !important;\n  border: 0 !important;\n  background: transparent !important;\n  /* remove any background-image from the lib */\n  background-image: none !important;\n  color: #ffffff !important;\n  text-indent: 0 !important;        /* show our symbol */\n  opacity: 1 !important;\n  display: inline-flex !important;\n  align-items: center !important;\n  justify-content: center !important;\n}\n\n/* draw the X ourselves */\n.choices__list--multiple .choices__item .choices__button::after{\n  content: '×' !important;\n  color: #ffffff !important;\n  font-weight: 700 !important;\n  font-size: 15px !important;\n  line-height: 15px !important;\n}\n\n/* cancel any other pseudo content that may hide it */\n.choices__list--multiple .choices__item .choices__button::before{\n  content: none !important;\n}\n","size_bytes":58574},"public/js/account.js":{"content":"document.addEventListener('DOMContentLoaded', async () => {\n  const container = document.getElementById('account-content');\n\n  try {\n    const res = await fetch('/api/account', { credentials: 'same-origin' });\n    if (!res.ok) {\n      const err = await res.json().catch(() => ({}));\n      throw new Error(err.error || `Request failed (${res.status})`);\n    }\n    const data = await res.json();\n\n    // Panel + cards\n    container.innerHTML = `\n      <div class=\"account-panel\">\n        <div class=\"account-grid\">\n          ${accRow('user', 'Name', data.name || '')}\n          ${accRow('briefcase', 'Department', data.department || '')}\n          ${accRow('award', 'Position', data.position || '')}\n          ${accRow('phone', 'Phone', data.phone || '')}\n          ${accRow('mail', 'Email', data.email || '')}\n          ${accRow('hash', 'Employee Code', data.employeeCode ?? '')}\n          ${accRow('lock', 'Password', mask(data.password))}\n        </div>\n      </div>\n    `;\n\n  } catch (e) {\n    container.innerHTML = `\n      <div class=\"card\" style=\"border:1px solid #FCA5A5; background:#FEE2E2; color:#B91C1C; padding:1rem; border-radius:8px;\">\n        <strong>Error:</strong> ${escapeHTML(e.message)}\n      </div>\n    `;\n  } finally {\n    if (window.feather) feather.replace();\n  }\n});\n\nfunction accRow(icon, label, value){\n  return `\n    <div class=\"acc-row\">\n      <div class=\"acc-left\">\n        <span class=\"acc-ico\"><i data-feather=\"${icon}\"></i></span>\n        <span class=\"acc-label\">${escapeHTML(label)}</span>\n      </div>\n      <div class=\"acc-value\">${escapeHTML(String(value || '—'))}</div>\n    </div>\n  `;\n}\nfunction mask(v){\n  if (v === null || v === undefined || String(v).trim() === '') return '—';\n  return '••••••••';\n}\n// Simple HTML escape\nfunction escapeHTML(s) {\n  return String(s).replace(/[&<>\"']/g, c => ({\n    '&': '&amp;', '<': '&lt;', '>': '&gt;', '\"': '&quot;', \"'\": '&#39;'\n  }[c]));\n}","size_bytes":1937},"public/js/assigned-orders.js":{"content":"// public/js/assigned-orders.js\ndocument.addEventListener('DOMContentLoaded', () => {\n  const grid   = document.getElementById('assigned-grid');\n  const empty  = document.getElementById('assigned-empty');\n\n  // Stats\n  const stTotal = document.getElementById('st-total');\n  const stFull  = document.getElementById('st-full');\n  const stMiss  = document.getElementById('st-missing');\n\n  // Rename labels to match your request\n  const statLabels = document.querySelectorAll('.stats .stat .stat__label');\n  if (statLabels[0]) statLabels[0].textContent = 'Total assigned (orders)';\n  if (statLabels[1]) statLabels[1].textContent = 'Total prepared';\n  if (statLabels[2]) statLabels[2].textContent = 'Not completed';\n\n  // Popover (partial)\n  const popover      = document.getElementById('partial-popover');\n  const popInput     = document.getElementById('popover-input');\n  const popHint      = document.getElementById('popover-hint');\n  const popBtnSave   = popover.querySelector('[data-pop=\"save\"]');\n  const popBtnCancel = popover.querySelector('[data-pop=\"cancel\"]');\n\n  // State\n  let items = [];           // flat items\n  let groups = [];          // grouped by order\n  const itemById = new Map();\n  let currentEdit = null;   // { id, requested, available, anchor }\n\n  const fmt = (n) => String(Number(n || 0));\n  const escapeHTML = (s) => String(s || '').replace(/[&<>\"']/g, (c) => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#39;'}[c]));\n\n  const groupKeyOf = (it) => {\n    // لو عندك orderCode مستقبلًا\n    // if (it.orderCode && String(it.orderCode).trim()) return `oid:${String(it.orderCode).trim()}`;\n    const reason = (it.reason && String(it.reason).trim()) || 'No Reason';\n    const bucket = (it.createdTime || '').slice(0, 10); // day bucket\n    return `grp:${reason}|${bucket}`;\n  };\n\n  function buildGroups(list) {\n    const map = new Map();\n    for (const it of list) {\n      const key = groupKeyOf(it);\n      const g = map.get(key) || {\n        key,\n        title: (it.reason && String(it.reason).trim()) || 'No Reason',\n        subtitle: new Date(it.createdTime || Date.now()).toLocaleString(),\n        items: [],\n      };\n      g.items.push(it);\n      map.set(key, g);\n    }\n    const arr = Array.from(map.values());\n    arr.forEach(recomputeGroupStats);\n    return arr;\n  }\n\n  function recomputeGroupStats(g) {\n    const total = g.items.length;\n    const full  = g.items.filter(x => Number(x.remaining) === 0).length;\n    g.total = total;\n    g.miss  = total - full; // عناصر بها نقص (لعرض البادج فقط)\n    // prepared order = كل عناصره Status === Prepared\n    g.prepared = g.items.length > 0 && g.items.every(x => String(x.status || '') === 'Prepared');\n  }\n\n  function updatePageStats() {\n    const totalOrders = groups.length;\n    const preparedOrders = groups.filter(g => g.prepared).length;\n    const notCompleted = totalOrders - preparedOrders;\n    stTotal.textContent = fmt(totalOrders);\n    stFull.textContent  = fmt(preparedOrders);\n    stMiss.textContent  = fmt(notCompleted);\n  }\n\n  async function load() {\n    try {\n      const res = await fetch('/api/orders/assigned', { cache: 'no-store', credentials: 'same-origin' });\n      if (!res.ok) throw new Error('Failed to load assigned orders');\n      items = await res.json();\n      itemById.clear();\n      items.forEach(it => itemById.set(it.id, it));\n\n      groups = buildGroups(items);\n      renderGroups(groups);\n      updatePageStats();\n    } catch (e) {\n      console.error(e);\n      UI?.toast?.({ type: 'error', message: 'Failed to load assigned orders' });\n    }\n  }\n\n  function renderGroups(groups) {\n    grid.innerHTML = '';\n    if (!groups.length) {\n      empty.style.display = '';\n      return;\n    }\n    empty.style.display = 'none';\n\n    for (const g of groups) {\n      const card = document.createElement('div');\n      card.className = 'order-card';\n      card.dataset.key = g.key;\n\n      const idsAttr = g.items.map(x => x.id).join(',');\n\n      card.innerHTML = `\n        <div class=\"order-card__head\">\n          <div class=\"order-card__title\">\n            <i data-feather=\"user-check\"></i>\n            <div class=\"order-card__title-text\">\n              <div class=\"order-card__title-main\">${escapeHTML(g.title)}</div>\n              <div class=\"order-card__subtitle\">${escapeHTML(g.subtitle)}</div>\n            </div>\n          </div>\n          <div class=\"order-card__right\">\n            <span class=\"badge badge--count\">Items: ${fmt(g.total)}</span>\n            <span class=\"badge badge--missing\">Missing: ${fmt(g.miss)}</span>\n            <button class=\"btn btn-success btn-icon\" data-action=\"prepared-order\" data-ids=\"${idsAttr}\">\n              <i data-feather=\"check-square\"></i><span>Mark prepared</span>\n            </button>\n            <button class=\"btn btn-primary btn-icon\" data-action=\"pdf\" data-ids=\"${idsAttr}\">\n              <i data-feather=\"download-cloud\"></i><span>Download</span>\n            </button>\n          </div>\n        </div>\n        <div class=\"order-card__items\">\n          ${g.items.map(it => `\n            <div class=\"order-item\" id=\"row-${it.id}\">\n              <div class=\"item-left\">\n                <div class=\"item-name\">${escapeHTML(it.productName || '-')}</div>\n              </div>\n              <div class=\"item-mid\">\n                <div class=\"num\">Req: <strong>${fmt(it.requested)}</strong></div>\n                <div class=\"num\">Avail: <strong data-col=\"available\">${fmt(it.available)}</strong></div>\n                <div class=\"num\">\n                  Rem:\n                  <span class=\"pill ${Number(it.remaining) > 0 ? 'pill--danger' : 'pill--success'}\" data-col=\"remaining\">${fmt(it.remaining)}</span>\n                </div>\n              </div>\n              <div class=\"item-actions\">\n                <button class=\"btn btn-success btn-icon btn-sm\" data-action=\"mark\" data-id=\"${it.id}\">\n                  <i data-feather=\"check-circle\"></i><span>In stock</span>\n                </button>\n                <button class=\"btn btn-warning btn-outline btn-icon btn-sm\" data-action=\"partial\" data-id=\"${it.id}\">\n                  <i data-feather=\"edit-3\"></i><span>Partial / Not in stock</span>\n                </button>\n              </div>\n            </div>\n          `).join('')}\n        </div>\n      `;\n\n      grid.appendChild(card);\n    }\n\n    if (window.feather) feather.replace({ 'stroke-width': 2 });\n  }\n\n  // Events (delegate on grid)\n  grid.addEventListener('click', (e) => {\n    const btn = e.target.closest('button[data-action]');\n    if (!btn) return;\n    const action = btn.getAttribute('data-action');\n\n    if (action === 'pdf') {\n      const ids = (btn.getAttribute('data-ids') || '').split(',').filter(Boolean);\n      if (ids.length) downloadOrderPDF(ids, btn);\n      return;\n    }\n    if (action === 'prepared-order') {\n      const ids = (btn.getAttribute('data-ids') || '').split(',').filter(Boolean);\n      if (ids.length) markOrderPrepared(ids, btn);\n      return;\n    }\n\n    const id = btn.getAttribute('data-id');\n    if (!id) return;\n\n    if (action === 'mark') markInStock(id, btn);\n    else if (action === 'partial') {\n      const it = itemById.get(id);\n      if (it) showPopover(btn, it);\n    }\n  });\n\n  async function markOrderPrepared(ids, btn) {\n    try {\n      setBusy(btn, true);\n      const res = await fetch('/api/orders/assigned/mark-prepared', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        credentials: 'same-origin',\n        body: JSON.stringify({ orderIds: ids })\n      });\n      const data = await res.json();\n      if (!res.ok || !data.success) throw new Error(data.error || 'Failed');\n\n      // Update local statuses\n      ids.forEach((id) => {\n        const it = itemById.get(id);\n        if (it) it.status = 'Prepared';\n      });\n\n      groups.forEach(recomputeGroupStats);\n      updatePageStats();\n\n      UI?.toast?.({ type: 'success', message: 'Order marked as Prepared' });\n    } catch (e) {\n      console.error(e);\n      UI?.toast?.({ type: 'error', message: e.message || 'Error' });\n    } finally {\n      setBusy(btn, false);\n    }\n  }\n\n  async function markInStock(id, btn) {\n    try {\n      setBusy(btn, true);\n      const res = await fetch('/api/orders/assigned/mark-in-stock', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        credentials: 'same-origin',\n        body: JSON.stringify({ orderPageId: id })\n      });\n      const data = await res.json();\n      if (!res.ok || !data.success) throw new Error(data.error || 'Failed');\n      applyRowUpdate(id, data.available, data.remaining);\n      UI?.toast?.({ type: 'success', message: 'Marked as in stock' });\n    } catch (e) {\n      console.error(e);\n      UI?.toast?.({ type: 'error', message: e.message || 'Error' });\n    } finally {\n      setBusy(btn, false);\n    }\n  }\n\n  function showPopover(anchorBtn, item) {\n    currentEdit = {\n      id: item.id,\n      requested: Number(item.requested),\n      available: Number(item.available),\n      anchor: anchorBtn\n    };\n\n    popInput.value = String(currentEdit.available ?? 0);\n    popInput.setAttribute('max', String(currentEdit.requested));\n    popHint.textContent = `Requested: ${currentEdit.requested}`;\n    positionPopover(anchorBtn);\n    popover.classList.remove('hidden');\n    popInput.focus();\n    popInput.select();\n  }\n\n  function hidePopover() {\n    popover.classList.add('hidden');\n    currentEdit = null;\n  }\n\n  function positionPopover(anchorBtn) {\n    const r = anchorBtn.getBoundingClientRect();\n    const pad = 8;\n    const pw = 260; // approximate popover width\n    const ph = 130; // approximate popover height\n    let top = r.bottom + pad;\n    let left = r.left + (r.width/2) - (pw/2);\n\n    const vw = window.innerWidth, vh = window.innerHeight;\n    if (left + pw > vw - 8) left = vw - pw - 8;\n    if (left < 8) left = 8;\n    if (top + ph > vh - 8) top = r.top - ph - pad;\n\n    popover.style.position = 'fixed';\n    popover.style.top  = `${top}px`;\n    popover.style.left = `${left}px`;\n  }\n\n  document.addEventListener('click', (e) => {\n    if (!currentEdit) return;\n    if (popover.contains(e.target) || currentEdit.anchor.contains(e.target)) return;\n    hidePopover();\n  });\n  window.addEventListener('resize', () => { if (currentEdit) positionPopover(currentEdit.anchor); });\n\n  popBtnCancel.addEventListener('click', hidePopover);\n  popBtnSave.addEventListener('click', async () => {\n    if (!currentEdit) return;\n    const val = Number(popInput.value);\n    if (Number.isNaN(val) || val < 0) {\n      UI?.toast?.({ type: 'warning', message: 'Please enter a valid non-negative number' });\n      return;\n    }\n    try {\n      popBtnSave.disabled = true;\n      const res = await fetch('/api/orders/assigned/available', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        credentials: 'same-origin',\n        body: JSON.stringify({ orderPageId: currentEdit.id, available: val })\n      });\n      const data = await res.json();\n      if (!res.ok || !data.success) throw new Error(data.error || 'Failed');\n      applyRowUpdate(currentEdit.id, data.available, data.remaining);\n      UI?.toast?.({ type: 'success', message: 'Availability updated' });\n      hidePopover();\n    } catch (e) {\n      console.error(e);\n      UI?.toast?.({ type: 'error', message: e.message || 'Error' });\n    } finally {\n      popBtnSave.disabled = false;\n    }\n  });\n\n  function applyRowUpdate(id, available, remaining) {\n    // update local\n    const it = itemById.get(id);\n    if (it) {\n      it.available = Number(available);\n      it.remaining = Number(remaining);\n    }\n\n    // update DOM\n    const row = document.getElementById(`row-${id}`);\n    if (row) {\n      const tdA = row.querySelector('[data-col=\"available\"]');\n      const tdR = row.querySelector('[data-col=\"remaining\"]');\n      if (tdA) tdA.textContent = fmt(available);\n      if (tdR) {\n        tdR.textContent = fmt(remaining);\n        tdR.classList.toggle('pill--danger', Number(remaining) > 0);\n        tdR.classList.toggle('pill--success', Number(remaining) === 0);\n      }\n    }\n\n    // recompute groups stats (for prepared detection)\n    groups.forEach(recomputeGroupStats);\n    updatePageStats();\n  }\n\n  // تعديل: فتح الـ PDF بعمل GET مع ids في URL\n  async function downloadOrderPDF(ids, btn) {\n    try {\n      setBusy(btn, true);\n      const url = '/api/orders/assigned/pdf?ids=' + encodeURIComponent(ids.join(','));\n      window.open(url, '_blank');\n    } finally {\n      setTimeout(() => setBusy(btn, false), 500);\n    }\n  }\n\n  function setBusy(btn, busy) {\n    if (!btn) return;\n    btn.disabled = !!busy;\n    btn.classList.toggle('is-busy', !!busy);\n  }\n\n  // Init\n  load();\n});","size_bytes":12742},"public/js/common-ui.js":{"content":"// public/js/common-ui.js\ndocument.addEventListener('DOMContentLoaded', () => {\n  const logoutBtn     = document.getElementById('logoutBtn');\n  const menuToggle    = document.getElementById('menu-toggle');   // قد لا يوجد\n  const sidebarToggle = document.getElementById('sidebar-toggle'); // موجود\n\n  const KEY_MINI = 'ui.sidebarMini';       // 1 = mini على الديسكتوب\n  const CACHE_ALLOWED = 'allowedPages';     // sessionStorage key\n  const isMobile = () => window.innerWidth <= 768;\n\n  // ====== Access control (show/hide links) ======\n  // مفاتيح lowercase للمقارنة الثابتة\n  const PAGE_SELECTORS = {\n    'current orders':            'a[href=\"/orders\"]',\n    'create new order':          'a[href=\"/orders/new\"]',\n    'stocktaking':               'a[href=\"/stocktaking\"]',\n    'requested orders':          'a[href=\"/orders/requested\"]',\n    'schools requested orders':  'a[href=\"/orders/requested\"]',\n    'assigned schools requested orders': 'a[href=\"/orders/assigned\"]',\n    'funds': 'a[href=\"/funds\"]'\n  };\n  const toKey = (s) => String(s || '').trim().toLowerCase();\n\n  function hideEl(el){ if (el){ el.style.display = 'none'; el.setAttribute('aria-hidden','true'); } }\n  function showEl(el){ if (el){ el.style.display = ''; el.removeAttribute('aria-hidden'); } }\n\n  // أظهر المسموح وأخفِ غير المسموح (حتمي)\n  function applyAllowedPages(allowed){\n    if (!Array.isArray(allowed) || allowed.length === 0) return;\n    const set = new Set(allowed.map(toKey));\n\n    Object.entries(PAGE_SELECTORS).forEach(([key, selector]) => {\n      const link = document.querySelector(selector);\n      if (!link) return;\n      const li = link.closest('li') || link;\n      if (set.has(key)) showEl(li);\n      else hideEl(li);\n    });\n  }\n\n  function cacheAllowedPages(arr){ try { sessionStorage.setItem(CACHE_ALLOWED, JSON.stringify(arr || [])); } catch {} }\n  function getCachedAllowedPages(){\n    try { const r = sessionStorage.getItem(CACHE_ALLOWED); const a = JSON.parse(r); return Array.isArray(a) ? a : null; }\n    catch { return null; }\n  }\n\n  // ====== Greeting ======\n  const getCachedName = () => (localStorage.getItem('username') || '').trim();\n  const renderGreeting = (name) => {\n    const n = (name || '').trim();\n    document.querySelectorAll('[data-username]').forEach(el => el.textContent = n || 'User');\n  };\n\n  // لا نطبق الكاش القديم قبل جلب /api/account لتجنّب الإخفاء الخاطئ\n  // const early = getCachedAllowedPages(); if (early) applyAllowedPages(early);\n\n  async function ensureGreetingAndPages(){\n    const cached = getCachedName();\n    if (cached) renderGreeting(cached);\n\n    try {\n      const res = await fetch('/api/account', { credentials: 'same-origin', cache: 'no-store' });\n      if (!res.ok) return;\n      const data = await res.json();\n\n      const name = (data && (data.name || data.username)) ? String(data.name || data.username) : '';\n      if (name) {\n        if (name !== cached) localStorage.setItem('username', name);\n        renderGreeting(name);\n      } else if (!cached) {\n        renderGreeting('User');\n      }\n\n      if (Array.isArray(data.allowedPages)) {\n        cacheAllowedPages(data.allowedPages);\n        applyAllowedPages(data.allowedPages); // يُظهر/يخفي بشكل حتمي\n      }\n    } catch {}\n  }\n\n  // ====== Sidebar toggle ======\n  function setAria(){\n    const expanded = isMobile()\n      ? !document.body.classList.contains('sidebar-collapsed')\n      : !document.body.classList.contains('sidebar-mini');\n    [menuToggle, sidebarToggle].forEach(btn => btn && btn.setAttribute('aria-expanded', String(!!expanded)));\n  }\n\n  function applyInitial(){\n    if (isMobile()){\n      document.body.classList.remove('sidebar-mini');\n      document.body.classList.remove('sidebar-collapsed');\n    } else {\n      const pref = localStorage.getItem(KEY_MINI);\n      if (pref === '1') document.body.classList.add('sidebar-mini');\n      else document.body.classList.remove('sidebar-mini');\n      document.body.classList.remove('sidebar-collapsed');\n    }\n    setAria();\n  }\n\n  function toggleSidebar(e){\n    if (e){ e.preventDefault(); e.stopPropagation(); }\n    if (isMobile()){\n      document.body.classList.toggle('sidebar-collapsed');\n    } else {\n      document.body.classList.toggle('sidebar-mini');\n      localStorage.setItem(KEY_MINI, document.body.classList.contains('sidebar-mini') ? '1' : '0');\n    }\n    setAria();\n    if (window.feather) feather.replace();\n  }\n\n  sidebarToggle && sidebarToggle.addEventListener('click', toggleSidebar);\n  menuToggle    && menuToggle.addEventListener('click', toggleSidebar);\n\n  // إغلاق السايدبار بالضغط خارجها (موبايل)\n  document.addEventListener('click', (event) => {\n    if (!isMobile()) return;\n    const clickedInteractive = event.target.closest('button,[type=\"button\"],[type=\"submit\"],a,input,select,textarea,.choices,.form-actions');\n    if (clickedInteractive) return;\n    const insideSidebar = event.target.closest('.sidebar');\n    const onToggles = event.target.closest('#menu-toggle, #sidebar-toggle');\n    if (insideSidebar || onToggles) return;\n    if (!document.body.classList.contains('sidebar-collapsed')) return;\n    toggleSidebar(event);\n  });\n\n  document.addEventListener('keydown', (e) => {\n    if (isMobile() && e.key === 'Escape' && !document.body.classList.contains('sidebar-collapsed')) {\n      document.body.classList.add('sidebar-collapsed');\n      setAria();\n    }\n  });\n\n  // ====== Logout ======\n  logoutBtn && logoutBtn.addEventListener('click', async (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    try { await fetch('/api/logout', { method: 'POST', credentials: 'include' }); } catch(e) {}\n    try { sessionStorage.clear(); } catch {}\n    try { localStorage.removeItem(KEY_MINI); localStorage.removeItem('username'); } catch {}\n    window.location.href = '/login';\n  });\n\n  // Init\n  applyInitial();\n  ensureGreetingAndPages();\n\n  window.addEventListener('user:updated', () => {\n    renderGreeting(getCachedName());\n    const allowed = getCachedAllowedPages();\n    if (allowed) applyAllowedPages(allowed);\n  });\n\n  let resizeTimer;\n  window.addEventListener('resize', () => {\n    clearTimeout(resizeTimer);\n    resizeTimer = setTimeout(applyInitial, 150);\n  });\n\n  if (window.feather) feather.replace();\n});\n\n// UI Toast — modern notifications\n(() => {\n  const ROOT_ID = 'toast-root';\n\n  function ensureRoot() {\n    let root = document.getElementById(ROOT_ID);\n    if (!root) {\n      root = document.createElement('div');\n      root.id = ROOT_ID;\n      root.setAttribute('aria-live', 'polite');\n      root.setAttribute('aria-atomic', 'true');\n      document.body.appendChild(root);\n    }\n    return root;\n  }\n\n  function iconNameByType(type) {\n    switch (type) {\n      case 'success': return 'check-circle';\n      case 'error':   return 'x-circle';\n      case 'warning': return 'alert-triangle';\n      default:        return 'info';\n    }\n  }\n\n  function toast({ title = '', message = '', type = 'success', duration = 4000 } = {}) {\n    const root = ensureRoot();\n\n    const el = document.createElement('div');\n    el.className = `toast toast--${type}`;\n\n    el.innerHTML = `\n      <div class=\"toast__icon\"><i data-feather=\"${iconNameByType(type)}\"></i></div>\n      <div class=\"toast__body\">\n        ${title ? `<div class=\"toast__title\">${title}</div>` : ''}\n        <div class=\"toast__msg\">${message}</div>\n      </div>\n      <button class=\"toast__close\" aria-label=\"Close\">&times;</button>\n      <div class=\"toast__progress\"></div>\n    `;\n\n    root.appendChild(el);\n    requestAnimationFrame(() => el.classList.add('show'));\n    if (window.feather) feather.replace({ 'stroke-width': 2 });\n\n    const close = () => {\n      el.classList.remove('show');\n      setTimeout(() => el.remove(), 200);\n    };\n    el.querySelector('.toast__close').addEventListener('click', close);\n\n    let start = Date.now();\n    const prog = el.querySelector('.toast__progress');\n    const tick = () => {\n      const pct = Math.min(100, ((Date.now() - start) / duration) * 100);\n      prog.style.width = `${100 - pct}%`;\n      if (pct < 100 && document.body.contains(el)) requestAnimationFrame(tick);\n      else close();\n    };\n    requestAnimationFrame(tick);\n  }\n\n  window.UI = window.UI || {};\n  window.UI.toast = toast;\n})();","size_bytes":8392},"public/js/funds.js":{"content":"// funds.js - Mission Expenses Form Handler\n\nlet expenseCounter = 0;\nlet FUNDS_TYPE_OPTIONS = [];\nasync function loadFundsTypeOptions() {\n  try {\n    const res = await fetch('/api/funds/options', { credentials: 'same-origin' });\n    if (!res.ok) throw new Error('Failed to load options');\n    const data = await res.json();\n    FUNDS_TYPE_OPTIONS = Array.isArray(data.options) ? data.options : [];\n  } catch (e) {\n    // fallback list\n    FUNDS_TYPE_OPTIONS = ['Transportation','Accommodation','Meals','Fuel','Equipment','Communication','Other'];\n  }\n}\nfunction populateFundsTypeSelect(selectEl, selected) {\n  if (!selectEl) return;\n  selectEl.innerHTML = '';\n  const defaultOpt = document.createElement('option');\n  defaultOpt.value = '';\n  defaultOpt.textContent = 'Select expense type...';\n  selectEl.appendChild(defaultOpt);\n  const list = FUNDS_TYPE_OPTIONS && FUNDS_TYPE_OPTIONS.length ? FUNDS_TYPE_OPTIONS : ['Transportation','Accommodation','Meals','Fuel','Equipment','Communication','Other'];\n  for (const name of list) {\n    const opt = document.createElement('option');\n    opt.value = name;\n    opt.textContent = name;\n    if (selected && selected === name) opt.selected = true;\n    selectEl.appendChild(opt);\n  }\n}\n\n\ndocument.addEventListener('DOMContentLoaded', function() {\n  // Initialize the page\n  initializePage();\n\n  // Add event listeners\n  document.getElementById('addExpenseBtn').addEventListener('click', addExpenseEntry);\n  document.getElementById('fundsForm').addEventListener('submit', handleFormSubmit);\n\n  // Check database configuration\n  checkDatabaseConfiguration();\n\n  // Add initial expense entry\n  addExpenseEntry();\n});\n\nasync function initializePage() { await loadFundsTypeOptions();  await loadFundsTypeOptions();\n  // Set up logout functionality\n  const logoutBtn = document.getElementById('logoutBtn');\n  if (logoutBtn) {\n    logoutBtn.addEventListener('click', handleLogout);\n  }\n\n  // Initialize sidebar toggle\n\n}\n\nfunction addExpenseEntry() {\n  expenseCounter++;\n\n  const expensesList = document.getElementById('expensesList');\n  const expenseDiv = document.createElement('div');\n  expenseDiv.className = 'expense-entry';\n  expenseDiv.dataset.expenseId = expenseCounter;\n\n  expenseDiv.innerHTML = `\n    <div class=\"expense-header\">\n      <h4><i data-feather=\"receipt\"></i> Expense ${expenseCounter}</h4>\n      <button type=\"button\" class=\"expense-status remove-expense\" data-expense-id=\"${expenseCounter}\" title=\"Delete expense\"></button>\n    </div>\n\n    <div class=\"form-row\">\n      <div class=\"form-group\">\n        <label for=\"fundsType${expenseCounter}\" class=\"form-label\">\n          <i data-feather=\"tag\"></i>\n          Funds Type *\n        </label>\n        <select\n          id=\"fundsType${expenseCounter}\"\n          name=\"expenses[${expenseCounter}][fundsType]\"\n          class=\"form-select\"\n          required\n        >\n          <option value=\"\">Select expense type...</option>\n          <option value=\"Transportation\">Transportation</option>\n          <option value=\"Accommodation\">Accommodation</option>\n          <option value=\"Meals\">Meals</option>\n          <option value=\"Fuel\">Fuel</option>\n          <option value=\"Equipment\">Equipment</option>\n          <option value=\"Communication\">Communication</option>\n          <option value=\"Other\">Other</option>\n        </select>\n      </div>\n\n      <div class=\"form-group\">\n        <label for=\"date${expenseCounter}\" class=\"form-label\">\n          <i data-feather=\"calendar\"></i>\n          Date *\n        </label>\n        <input\n          type=\"date\"\n          id=\"date${expenseCounter}\"\n          name=\"expenses[${expenseCounter}][date]\"\n          class=\"form-input\"\n          required\n        />\n      </div>\n    </div>\n\n    <div class=\"form-row\">\n      <div class=\"form-group\">\n        <label for=\"from${expenseCounter}\" class=\"form-label\">\n          <i data-feather=\"map-pin\"></i>\n          From *\n        </label>\n        <input\n          type=\"text\"\n          id=\"from${expenseCounter}\"\n          name=\"expenses[${expenseCounter}][from]\"\n          class=\"form-input\"\n          placeholder=\"Starting location\"\n          required\n        />\n      </div>\n\n      <div class=\"form-group\">\n        <label for=\"to${expenseCounter}\" class=\"form-label\">\n          <i data-feather=\"navigation\"></i>\n          To *\n        </label>\n        <input\n          type=\"text\"\n          id=\"to${expenseCounter}\"\n          name=\"expenses[${expenseCounter}][to]\"\n          class=\"form-input\"\n          placeholder=\"Destination location\"\n          required\n        />\n      </div>\n    </div>\n\n    <div class=\"form-row\">\n      <div class=\"form-group\">\n        <label for=\"cost${expenseCounter}\" class=\"form-label\">\n          <i data-feather=\"dollar-sign\"></i>\n          Cost *\n        </label>\n        <input\n          type=\"number\"\n          id=\"cost${expenseCounter}\"\n          name=\"expenses[${expenseCounter}][cost]\"\n          class=\"form-input\"\n          placeholder=\"0.00\"\n          min=\"0\"\n          step=\"0.01\"\n          required\n        />\n      </div>\n\n      <div class=\"form-group\">\n        <label for=\"screenshot${expenseCounter}\" class=\"form-label\">\n          <i data-feather=\"image\"></i>\n          Receipt Screenshot\n        </label>\n        <input\n          type=\"file\"\n          id=\"screenshot${expenseCounter}\"\n          name=\"expenses[${expenseCounter}][screenshot]\"\n          class=\"form-input\"\n          accept=\"image/*,.pdf\"\n        />\n        <small class=\"form-help\">Upload receipt image or PDF (optional)</small>\n      </div>\n    </div>\n  `;\n\n  expensesList.appendChild(expenseDiv);\n\n  // Add event listener for remove button\n  const removeBtn = expenseDiv.querySelector('.remove-expense');\n  removeBtn.addEventListener('click', function() {\n    removeExpenseEntry(expenseCounter);\n  });\n\n  // Re-initialize Feather icons for new elements\n  feather.replace();\n\n  // Focus on the funds type select for the new entry\n  document.getElementById(`fundsType${expenseCounter}`).focus();\n}\n\nfunction removeExpenseEntry(expenseId) {\n  const expenseDiv = document.querySelector(`[data-expense-id=\"${expenseId}\"]`);\n  if (expenseDiv) {\n    // Don't allow removing the last expense entry\n    const totalExpenses = document.querySelectorAll('.expense-entry').length;\n    if (totalExpenses <= 1) {\n      showToast('At least one expense entry is required', 'error');\n      return;\n    }\n\n    expenseDiv.remove();\n  }\n}\n\nasync function handleFormSubmit(e) {\n  e.preventDefault();\n\n  const submitBtn = document.getElementById('submitBtn');\n  const formData = new FormData(e.target);\n\n  try {\n    // Disable submit button\n    submitBtn.disabled = true;\n    submitBtn.innerHTML = '<i data-feather=\"loader\"></i> Submitting...';\n    feather.replace();\n\n    // Validate form\n    if (!validateForm(formData)) {\n      return;\n    }\n\n    // Convert form data to structured data\n    const missionData = await processFormData(formData);\n\n    console.log('Submitting mission data:', missionData);\n\n    // Submit to API\n    const response = await fetch('/api/funds', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      credentials: 'same-origin',\n      body: JSON.stringify(missionData)\n    });\n\n    console.log('Response status:', response.status);\n    console.log('Response headers:', response.headers);\n\n    // Check if response is JSON\n    const contentType = response.headers.get('content-type');\n    if (!contentType || !contentType.includes('application/json')) {\n      const text = await response.text();\n      console.error('Non-JSON response:', text.substring(0, 500));\n      throw new Error('Server configuration error. Please check Notion database setup.');\n    }\n\n    const result = await response.json();\n    console.log('API result:', result);\n\n    if (response.ok && result.success) {\n      showToast(result.message || 'Mission expenses submitted successfully!', 'success');\n      resetFormCompletely();\n    } else {\n      // Handle specific error cases\n      if (result.error && result.error.includes('database with ID')) {\n        throw new Error('Funds database not found. Please check Notion integration setup.');\n      } else if (result.error && result.error.includes('not configured')) {\n        throw new Error('Database configuration error. Please contact administrator.');\n      } else {\n        throw new Error(result.error || 'Failed to submit mission expenses');\n      }\n    }\n\n  } catch (error) {\n    console.error('Error submitting funds:', error);\n    let errorMessage = 'Error submitting mission expenses';\n\n    if (error.message.includes('Funds database not found')) {\n      errorMessage = 'Funds database not found. Please check Replit Secrets and Notion integration.';\n    } else if (error.message.includes('Database configuration')) {\n      errorMessage = 'Database configuration error. Please contact administrator.';\n    } else if (error.message.includes('Server configuration')) {\n      errorMessage = 'Server configuration error. Please check database setup.';\n    } else if (error.message.includes('Failed to fetch')) {\n      errorMessage = 'Network error. Please check your connection and try again.';\n    } else {\n      errorMessage = error.message || errorMessage;\n    }\n\n    showToast(errorMessage, 'error');\n  } finally {\n    // Re-enable submit button\n    submitBtn.disabled = false;\n    submitBtn.innerHTML = '<i data-feather=\"save\"></i> Submit Mission Expenses';\n    feather.replace();\n  }\n}\n\nfunction validateForm(formData) {\n  const assignment = formData.get('assignment');\n  if (!assignment || assignment.trim().length === 0) {\n    showToast('Mission name is required', 'error');\n    return false;\n  }\n\n  // Check if at least one expense is properly filled\n  const expenses = document.querySelectorAll('.expense-entry');\n  let hasValidExpense = false;\n\n  for (const expense of expenses) {\n    const fundsTypeInput = expense.querySelector('[name*=\"[fundsType]\"]');\n    const dateInput = expense.querySelector('[name*=\"[date]\"]');\n    const fromInput = expense.querySelector('[name*=\"[from]\"]');\n    const toInput = expense.querySelector('[name*=\"[to]\"]');\n    const costInput = expense.querySelector('[name*=\"[cost]\"]');\n\n    if (fundsTypeInput.value && dateInput.value && fromInput.value && \n        toInput.value && costInput.value && parseFloat(costInput.value) > 0) {\n      hasValidExpense = true;\n      break;\n    }\n  }\n\n  if (!hasValidExpense) {\n    showToast('At least one complete expense entry is required', 'error');\n    return false;\n  }\n\n  return true;\n}\n\nasync function processFormData(formData) {\n  const assignment = formData.get('assignment');\n  const expenses = [];\n\n  // Process each expense entry\n  const expenseEntries = document.querySelectorAll('.expense-entry');\n\n  for (const entry of expenseEntries) {\n    const expenseId = entry.dataset.expenseId;\n\n    const fundsType = formData.get(`expenses[${expenseId}][fundsType]`);\n    const date = formData.get(`expenses[${expenseId}][date]`);\n    const from = formData.get(`expenses[${expenseId}][from]`);\n    const to = formData.get(`expenses[${expenseId}][to]`);\n    const cost = formData.get(`expenses[${expenseId}][cost]`);\n    const screenshot = formData.get(`expenses[${expenseId}][screenshot]`);\n\n    // Only include expenses with required fields filled\n    if (fundsType && date && from && to && cost && parseFloat(cost) > 0) {\n      const expense = {\n        fundsType,\n        date,\n        from,\n        to,\n        cost: parseFloat(cost)\n      };\n\n      // Handle file upload if present\n      if (screenshot && screenshot.size > 0) {\n        // For now, just include the file info\n        // Note: Actual file upload to Notion requires additional implementation\n        expense.screenshotName = screenshot.name;\n        expense.screenshotType = screenshot.type;\n        expense.screenshotSize = screenshot.size;\n      }\n\n      expenses.push(expense);\n    }\n  }\n\n  return {\n    assignment: assignment.trim(),\n    expenses\n  };\n}\n\n// Note: File upload functionality temporarily simplified\n// Future enhancement: Implement proper file upload to cloud storage\n// and store the URL in Notion's file property\n\nfunction resetExpenseEntries() {\n  // Remove all expense entries\n  const expensesList = document.getElementById('expensesList');\n  expensesList.innerHTML = '';\n\n  // Reset counter and add one initial entry\n  expenseCounter = 0;\n  addExpenseEntry();\n}\n\nfunction resetFormCompletely() {\n  // Reset the main form\n  document.getElementById('fundsForm').reset();\n\n  // Clear assignment field specifically\n  document.getElementById('assignment').value = '';\n\n  // Remove all expense entries and add a fresh one\n  const expensesList = document.getElementById('expensesList');\n  expensesList.innerHTML = '';\n\n  // Reset counter and add one initial entry\n  expenseCounter = 0;\n  addExpenseEntry();\n\n  // Focus on assignment field\n  document.getElementById('assignment').focus();\n}\n\nfunction showToast(message, type = 'info') {\n  if (typeof UI !== 'undefined' && UI.toast) {\n    UI.toast({ type, message });\n  } else {\n    // Fallback alert if UI toast is not available\n    alert(message);\n  }\n}\n\nasync function handleLogout() {\n  try {\n    const response = await fetch('/api/logout', {\n      method: 'POST',\n      credentials: 'same-origin'\n    });\n\n    if (response.ok) {\n      window.location.href = '/login';\n    }\n  } catch (error) {\n    console.error('Logout error:', error);\n    window.location.href = '/login';\n  }\n}\n\n\nasync function checkDatabaseConfiguration() {\n  try {\n    const response = await fetch('/api/funds/check', {\n      method: 'GET',\n      credentials: 'same-origin'\n    });\n\n    const result = await response.json();\n\n    if (!response.ok || !result.configured) {\n      console.error('Funds database configuration issue:', result.error);\n      showToast('âŒ Funds database not accessible. Please check Replit Secrets and Notion sharing permissions.', 'error');\n    } else {\n      console.log('âœ… Funds database configured:', result.title);\n      showToast('âœ… Funds database connected successfully', 'success');\n    }\n  } catch (error) {\n    console.error('Could not check database configuration:', error);\n    showToast('âš ï¸ Cannot verify database connection. Please check your setup.', 'warning');\n  }\n}","size_bytes":14304},"public/js/login.js":{"content":"document.addEventListener('DOMContentLoaded', function () {\n  const loginForm = document.getElementById('loginForm');\n  const errorMessage = document.getElementById('error-message');\n  const loginBtn = loginForm.querySelector('.login-btn');\n\n  function showError(message) {\n    errorMessage.textContent = message;\n    errorMessage.style.display = 'block';\n  }\n\n  function hideError() {\n    errorMessage.style.display = 'none';\n  }\n\n  function setLoading(loading) {\n    if (loading) {\n      loginBtn.classList.add('loading');\n      loginBtn.disabled = true;\n      loginBtn.textContent = 'Signing In...';\n    } else {\n      loginBtn.classList.remove('loading');\n      loginBtn.disabled = false;\n      loginBtn.textContent = 'Sign In';\n    }\n  }\n\n  loginForm.addEventListener('submit', async function (event) {\n    event.preventDefault();\n    hideError();\n    setLoading(true);\n\n    const formData = new FormData(loginForm);\n    const username = formData.get('username');\n    const password = formData.get('password');\n\n    try {\n      const response = await fetch('/api/login', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ username, password }),\n      });\n\n      const result = await response.json();\n\n      if (response.ok && result.success) {\n        // Save username from login form for greetings\n        try { localStorage.setItem('username', String(username || '')); } catch {}\n\n        // Success - redirect to dashboard\n        window.location.href = '/dashboard';\n      } else {\n        showError(result.error || 'Login failed. Please try again.');\n      }\n    } catch (error) {\n      console.error('Login error:', error);\n      showError('Network error. Please check your connection and try again.');\n    } finally {\n      setLoading(false);\n    }\n  });\n\n  document.getElementById('username').addEventListener('input', hideError);\n  document.getElementById('password').addEventListener('input', hideError);\n  // Toggle show/hide password\n  const pwdInput = document.getElementById('password');\n  const toggleBtn = document.getElementById('togglePassword');\n  if (toggleBtn && pwdInput) {\n    const eye = toggleBtn.querySelector('.icon-eye');\n    const eyeOff = toggleBtn.querySelector('.icon-eye-off');\n    toggleBtn.addEventListener('click', () => {\n      const show = pwdInput.getAttribute('type') === 'password';\n      pwdInput.setAttribute('type', show ? 'text' : 'password');\n      toggleBtn.setAttribute('aria-pressed', String(show));\n      if (eye && eyeOff) {\n        eye.style.display = show ? 'none' : '';\n        eyeOff.style.display = show ? '' : 'none';\n      }\n    });\n  }\n\n});","size_bytes":2667},"public/js/order-details.step.js":{"content":"document.addEventListener('DOMContentLoaded', async () => {\n  const orderReason = document.getElementById('orderReason');\n  const form = document.getElementById('detailsForm');\n\n  // Prefill\n  try {\n    const d = await fetch('/api/order-draft', { credentials: 'same-origin' }).then(r => r.json());\n    if (d.reason) orderReason.value = d.reason;\n  } catch {}\n\n  form.addEventListener('submit', async (e) => {\n    e.preventDefault();\n    e.stopPropagation(); // مهم: لا تخلّي الضغط يوصل للوثيقة فيقلب السايدبار\n    const reason = (orderReason.value || '').trim();\n    if (!reason) return alert('Please enter the order reason.');\n    try {\n      const res = await fetch('/api/order-draft/details', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        credentials: 'same-origin',\n        body: JSON.stringify({ reason })\n      });\n      if (!res.ok) throw new Error('Failed to save details.');\n      window.location.href = '/orders/new/products';\n    } catch (err) {\n      alert(err.message);\n    }\n  });\n\n  if (window.feather) feather.replace();\n});","size_bytes":1125},"public/js/order-products.step.js":{"content":"// public/js/order-products.step.js\n(() => {\n  let components = [];\n  let isComponentsLoaded = false;\n  const toHydrate = []; // { inst, container, defaultId }\n\n  const rowsContainer = document.getElementById('products-container');\n  const addBtn = document.getElementById('addProductBtn');\n  const nextBtn = document.getElementById('nextReviewBtn');\n\n  async function loadComponents() {\n    try {\n      const res = await fetch('/api/components');\n      if (!res.ok) throw new Error(await res.text());\n      const list = await res.json();\n      if (!Array.isArray(list)) throw new Error('Bad response format');\n      return list;\n    } catch (e) {\n      console.error('Failed to load components:', e);\n      return [];\n    }\n  }\n\n  function optionsFromComponents() {\n    return components.map(c => ({\n      value: c.id,\n      label: c.name,\n      selected: false,\n      disabled: false\n    }));\n  }\n\n  function enhanceWithChoices(select, defaultId = '') {\n    const inst = new Choices(select, {\n      searchEnabled: true,\n      placeholder: true,\n      placeholderValue: isComponentsLoaded ? 'Select a product...' : 'Loading products list...',\n      itemSelectText: '',\n      shouldSort: true,\n      allowHTML: false,\n      position: 'bottom',\n      searchResultLimit: 500,\n      // ### START: MODIFICATION ###\n      // This tells the search how to filter properly\n      fuseOptions: {\n        keys: ['label'], // Search within the product's name\n        threshold: 0.3   // Adjust how \"fuzzy\" the search is (0=exact, 1=anything)\n      }\n      // ### END: MODIFICATION ###\n    });\n\n    const container =\n      inst.containerOuter?.element ||\n      select.closest('.choices') ||\n      select.parentElement.querySelector('.choices');\n\n    if (!isComponentsLoaded) {\n      container?.classList.add('is-loading');\n      inst.disable(); // لغاية ما الداتا تيجي\n      toHydrate.push({ inst, container, defaultId });\n    } else {\n      inst.clearChoices();\n      inst.setChoices(optionsFromComponents(), 'value', 'label', true);\n      if (defaultId) inst.setChoiceByValue(String(defaultId));\n    }\n    return inst;\n  }\n\n  function hydratePendingChoices() {\n    toHydrate.forEach(({ inst, container, defaultId }) => {\n      try {\n        inst.enable();\n        inst.clearChoices();\n        inst.setChoices(optionsFromComponents(), 'value', 'label', true);\n        if (defaultId) inst.setChoiceByValue(String(defaultId));\n        container?.classList.remove('is-loading');\n      } catch (e) {\n        console.warn('Hydration failed for a select', e);\n      }\n    });\n    toHydrate.length = 0;\n  }\n\n  function addRow(defaultId = '', defaultQty = 1) {\n    const row = document.createElement('div');\n    row.className = 'product-row';\n\n    // Product cell\n    const productCell = document.createElement('div');\n    productCell.className = 'field';\n    const select = document.createElement('select');\n    select.className = 'product-select';\n    // placeholder (لو لسه بنحمّل، يبقى loading)\n    const placeholder = document.createElement('option');\n    placeholder.value = '';\n    placeholder.disabled = true;\n    placeholder.selected = true;\n    placeholder.textContent = isComponentsLoaded\n      ? 'Select a product...'\n      : 'Loading products list...';\n    select.appendChild(placeholder);\n    productCell.appendChild(select);\n\n    // Quantity cell\n    const qtyCell = document.createElement('div');\n    qtyCell.className = 'field';\n    const qtyInput = document.createElement('input');\n    qtyInput.type = 'number';\n    qtyInput.min = '1';\n    qtyInput.step = '1';\n    qtyInput.value = String(defaultQty || 1);\n    qtyInput.className = 'qty-input';\n    qtyCell.appendChild(qtyInput);\n\n    // Remove X red\n    const actionsCell = document.createElement('div');\n    actionsCell.className = 'field actions-cell';\n    const removeBtn = document.createElement('button');\n    removeBtn.type = 'button';\n    removeBtn.className = 'icon-btn icon-btn--danger icon-btn--x';\n    removeBtn.title = 'Remove';\n    removeBtn.setAttribute('aria-label', 'Remove product');\n    removeBtn.innerHTML = '&times;';\n    removeBtn.addEventListener('click', () => row.remove());\n    actionsCell.appendChild(removeBtn);\n\n    row.appendChild(productCell);\n    row.appendChild(qtyCell);\n    row.appendChild(actionsCell);\n    rowsContainer.appendChild(row);\n\n    // فعّل Choices فورًا علشان الشكل يبقى ثابت من أول لحظة\n    enhanceWithChoices(select, defaultId);\n  }\n\n  async function saveAndGoNext() {\n    const rows = [...rowsContainer.querySelectorAll('.product-row')];\n    const payload = [];\n\n    for (const r of rows) {\n      const selectEl = r.querySelector('select');\n      const id = selectEl?.value;\n      const qty = Number(r.querySelector('input[type=\"number\"]')?.value);\n      if (id && Number.isFinite(qty) && qty > 0) {\n        payload.push({ id, quantity: qty });\n      }\n    }\n\n    if (payload.length === 0) {\n      alert('Please choose at least one product and quantity.');\n      return;\n    }\n\n    const res = await fetch('/api/order-draft/products', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ products: payload })\n    });\n    const data = await res.json().catch(() => ({}));\n    if (!res.ok) {\n      alert(data?.error || 'Failed to save products.');\n      return;\n    }\n    window.location.href = '/orders/new/review';\n  }\n\n  async function init() {\n    if (!rowsContainer) {\n      console.error('Missing #products-container in DOM');\n      return;\n    }\n\n    // زر الإضافة\n    if (addBtn && !addBtn.dataset.enhanced) {\n      addBtn.dataset.enhanced = '1';\n      addBtn.innerHTML = '<i data-feather=\"plus\"></i><span>Add Another Product</span>';\n      if (window.feather) feather.replace();\n    }\n\n    // 1) اعرض صف افتراضي بشكل Choices من البداية\n    addRow();\n\n    // 2) حمّل المنتجات ثم روّق الـ selects\n    components = await loadComponents();\n    isComponentsLoaded = true;\n    hydratePendingChoices();\n\n    // 3) Hydrate من الـ draft (لو موجود) — نستبدل الصفوف الحالية\n    try {\n      const res = await fetch('/api/order-draft');\n      if (res.ok) {\n        const draft = await res.json();\n        if (Array.isArray(draft.products) && draft.products.length) {\n          rowsContainer.innerHTML = '';\n          for (const p of draft.products) {\n            addRow(String(p.id), Number(p.quantity) || 1);\n          }\n        }\n      }\n    } catch { /* ignore */ }\n\n    addBtn?.addEventListener('click', () => addRow());\n    nextBtn?.addEventListener('click', saveAndGoNext);\n\n    if (window.feather) feather.replace();\n  }\n\n  document.addEventListener('DOMContentLoaded', init);\n})();","size_bytes":6794},"public/js/order-review.step.js":{"content":"document.addEventListener('DOMContentLoaded', async () => {\n  // ========= Toast: تصميم احترافي بظل =========\n  const toast = ((doc) => {\n    const icons = {\n      success:\n        '<svg viewBox=\"0 0 24 24\" width=\"18\" height=\"18\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" aria-hidden=\"true\"><path d=\"M20 6L9 17l-5-5\"/></svg>',\n      error:\n        '<svg viewBox=\"0 0 24 24\" width=\"18\" height=\"18\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" aria-hidden=\"true\"><circle cx=\"12\" cy=\"12\" r=\"10\"/><line x1=\"15\" y1=\"9\" x2=\"9\" y2=\"15\"/><line x1=\"9\" y1=\"9\" x2=\"15\" y2=\"15\"/></svg>',\n      info:\n        '<svg viewBox=\"0 0 24 24\" width=\"18\" height=\"18\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" aria-hidden=\"true\"><circle cx=\"12\" cy=\"12\" r=\"10\"/><line x1=\"12\" y1=\"16\" x2=\"12\" y2=\"12\"/><line x1=\"12\" y1=\"8\" x2=\"12.01\" y2=\"8\"/></svg>'\n    };\n\n    const ensureStack = () => {\n      let stack = doc.getElementById('toast-stack');\n      if (!stack) {\n        stack = doc.createElement('div');\n        stack.id = 'toast-stack';\n        stack.className = 'toast-stack';\n        doc.body.appendChild(stack);\n      }\n      return stack;\n    };\n\n    return ({ type = 'info', title = '', message = '', duration = 3500 } = {}) => {\n      const stack = ensureStack();\n      const el = doc.createElement('div');\n      el.className = `toast toast--${type}`;\n      el.setAttribute('role', 'status');\n      el.setAttribute('aria-live', 'polite');\n\n      el.innerHTML = `\n        <div class=\"toast__icon\">${icons[type] || icons.info}</div>\n        <div class=\"toast__content\">\n          <div class=\"toast__title\">${title ? String(title) : ''}</div>\n          ${message ? `<div class=\"toast__msg\">${String(message)}</div>` : ''}\n        </div>\n        <button class=\"toast__close\" aria-label=\"Close notification\">✕</button>\n      `;\n\n      const remove = () => {\n        if (!el.isConnected) return;\n        el.classList.remove('is-in');\n        // wait transition then remove\n        setTimeout(() => el.remove(), 180);\n      };\n\n      el.querySelector('.toast__close').addEventListener('click', remove);\n\n      // Pause auto-hide on hover\n      let timer = null;\n      const startTimer = () => {\n        if (duration > 0) timer = setTimeout(remove, duration);\n      };\n      const stopTimer = () => { if (timer) { clearTimeout(timer); timer = null; } };\n      el.addEventListener('mouseenter', stopTimer);\n      el.addEventListener('mouseleave', startTimer);\n\n      stack.appendChild(el);\n      // animate in\n      requestAnimationFrame(() => el.classList.add('is-in'));\n      startTimer();\n\n      return el;\n    };\n  })(document);\n  // ========= نهاية Toast =========\n\n  // عناصر الـ UI\n  const reasonEl =\n    document.getElementById('summary-reason-value') ||\n    document.querySelector('[data-review-reason]');\n  const totalEl =\n    document.getElementById('summary-total-value') ||\n    document.querySelector('[data-review-total-items]');\n  const listEl =\n    document.getElementById('summary-products-list') ||\n    document.querySelector('[data-review-products-list]');\n  const submitBtn = document.getElementById('submitOrderBtn');\n\n  // Loading/content containers\n  const loadingIndicator = document.getElementById('loading-indicator');\n  const orderDetailsContainer = document.getElementById('order-details');\n\n  const showLoading = () => {\n    if (loadingIndicator) loadingIndicator.style.display = 'flex';\n    if (orderDetailsContainer) orderDetailsContainer.style.display = 'none';\n  };\n  const showContent = () => {\n    if (loadingIndicator) loadingIndicator.style.display = 'none';\n    if (orderDetailsContainer) orderDetailsContainer.style.display = 'block';\n  };\n\n  const escapeHTML = (s) =>\n    String(s).replace(/[&<>\"']/g, (c) => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;', \"'\":'&#39;'}[c]));\n\n  showLoading();\n\n  try {\n    // تحميل الدِرافْت + قائمة المنتجات\n    const [draftRes, compRes] = await Promise.all([\n      fetch('/api/order-draft', { credentials: 'same-origin' }),\n      fetch('/api/components', { credentials: 'same-origin' })\n    ]);\n\n    const draft = await draftRes.json().catch(() => ({}));\n    const components = await compRes.json().catch(() => []);\n\n    if (!draft?.reason) {\n      location.replace('/orders/new');\n      return;\n    }\n    if (!Array.isArray(draft.products) || draft.products.length === 0) {\n      location.replace('/orders/new/products');\n      return;\n    }\n\n    if (reasonEl) reasonEl.textContent = draft.reason || '-';\n    if (totalEl) totalEl.textContent = String(draft.products.length);\n\n    const byId = new Map(\n      Array.isArray(components) ? components.map(c => [String(c.id), c]) : []\n    );\n\n    if (listEl) {\n      listEl.innerHTML = '';\n      draft.products.forEach(p => {\n        const comp = byId.get(String(p.id));\n        const name = comp?.name || 'Unknown product';\n\n        const card = document.createElement('div');\n        card.className = 'product-card';\n        card.innerHTML = `\n          <span class=\"badge badge--name\" title=\"${escapeHTML(name)}\">${escapeHTML(name)}</span>\n          <span class=\"badge badge--qty\">Qty: ${Number(p.quantity) || 0}</span>\n        `;\n        listEl.appendChild(card);\n      });\n    }\n\n    showContent();\n  } catch (error) {\n    console.error('Failed to load order review:', error);\n    showContent();\n    if (listEl) {\n      listEl.innerHTML = `\n        <div class=\"card\" style=\"border:1px solid #FCA5A5; background:#FEE2E2; color:#B91C1C; padding:1rem; border-radius:8px;\">\n          Error loading order details. Please go back and try again.\n        </div>\n      `;\n    }\n    if (submitBtn) submitBtn.parentElement.style.display = 'none';\n  }\n\n  // إرسال الطلب — نفس المنطق لكن باستخدام التوست الجديد\n  if (submitBtn) {\n    submitBtn.addEventListener('click', async (e) => {\n      e.preventDefault();\n      if (submitBtn.disabled) return;\n      const origText = submitBtn.textContent;\n\n      submitBtn.disabled = true;\n      submitBtn.textContent = 'Submitting...';\n      submitBtn.setAttribute('aria-busy', 'true');\n\n      try {\n        const res = await fetch('/api/submit-order', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          credentials: 'same-origin',\n          body: JSON.stringify({})\n        });\n        const data = await res.json().catch(() => ({}));\n        if (!res.ok || !data.success) throw new Error(data?.message || 'Failed to submit');\n\n        toast({\n          type: 'success',\n          title: 'Order Submitted!',\n          message: 'Your order has been created successfully.',\n          duration: 3500\n        });\n\n        setTimeout(() => location.replace('/orders'), 1200);\n      } catch (err) {\n        toast({\n          type: 'error',\n          title: 'Submission Failed',\n          message: err?.message || 'Something went wrong. Please try again.',\n          duration: 5000\n        });\n        submitBtn.disabled = false;\n        submitBtn.textContent = origText;\n        submitBtn.removeAttribute('aria-busy');\n      }\n    });\n  }\n\n  if (window.feather) feather.replace();\n});","size_bytes":7321},"public/js/requested-orders.js":{"content":"// public/js/requested-orders.js\ndocument.addEventListener('DOMContentLoaded', () => {\n  const listDiv = document.getElementById('requested-list');\n  const searchInput = document.getElementById('requestedSearch');\n  initAssignChoices(assignSelect);\n  // Assign modal\n  const assignModal = document.getElementById('assignModal');\n  const assignClose = document.getElementById('assignClose');\n  const assignCancel = document.getElementById('assignCancel');\n  const assignApply = document.getElementById('assignApply');\n  const assignSelect = document.getElementById('assignSelect');\n\n  let allItems = [];\n  let groups = [];\n  let teamMembers = [];\n  let choiceInst = null;\n  let selectedGroup = null;\n\n  const norm = (s) => String(s || '').toLowerCase().trim();\n  const toMinuteKey = (iso) => String(iso || '').slice(0, 16);\n  const escapeHTML = (s) => String(s).replace(/[&<>\"']/g, c => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;', \"'\":'&#39;'}[c]));\n\n  function groupOrders(items) {\n    const map = new Map();\n    for (const it of items) {\n      const key = `${it.reason}|${toMinuteKey(it.createdTime)}`;\n      let g = map.get(key);\n      if (!g) {\n        g = { key, reason: it.reason, createdTime: it.createdTime, createdByName: it.createdByName || '', items: [] };\n        map.set(key, g);\n      }\n      g.items.push(it);\n      if (new Date(it.createdTime) > new Date(g.createdTime)) g.createdTime = it.createdTime;\n    }\n    return Array.from(map.values()).sort((a,b)=> new Date(b.createdTime) - new Date(a.createdTime));\n  }\n\n  function namesForItem(it){\n    if (Array.isArray(it.assignedToNames)) return it.assignedToNames.filter(Boolean);\n    if (it.assignedToName) return [it.assignedToName];\n    return [];\n  }\n\n  function assignedSummary(g) {\n    const names = new Set(g.items.flatMap(x => namesForItem(x)).filter(Boolean));\n    if (names.size === 0) return 'Unassigned';\n    if (names.size === 1) return `Assigned: ${Array.from(names)[0]}`;\n    return 'Assigned: Multiple';\n  }\n\n  function render() {\n    listDiv.innerHTML = '';\n    if (!groups.length) { listDiv.innerHTML = '<p>No requested orders found.</p>'; return; }\n\n    const frag = document.createDocumentFragment();\n    groups.forEach(g => {\n      const card = document.createElement('div');\n      card.className = 'order-card request-card';\n\n      const created = new Date(g.createdTime).toLocaleString('en-US', { year:'numeric', month:'short', day:'numeric', hour:'2-digit', minute:'2-digit' });\n      const itemsCount = g.items.length;\n      const summary = assignedSummary(g);\n\n      card.innerHTML = `\n        <div class=\"request-head\" style=\"display:flex; align-items:center; justify-content:space-between; gap:10px;\">\n          <div class=\"left\">\n            <h3 style=\"margin:0 0 4px 0;\">${escapeHTML(g.reason)}</h3>\n            <div class=\"meta\" style=\"display:flex; align-items:center; gap:8px;\">\n              <span class=\"badge badge--name\" title=\"Created by\">${escapeHTML(g.createdByName || '-')}</span>\n              <span class=\"badge badge--qty\" title=\"Items\">${itemsCount} items</span>\n              <span class=\"badge\" style=\"background:#F3F4F6; color:#374151; border-color:#E5E7EB;\">${created}</span>\n            </div>\n          </div>\n          <div class=\"right\" style=\"display:flex; align-items:center; gap:8px;\">\n            <button class=\"btn-outline-pill assign-btn\" data-key=\"${g.key}\">\n              <i data-feather=\"user-plus\"></i><span>${escapeHTML(summary)}</span>\n            </button>\n          </div>\n        </div>\n        <div class=\"request-items\" style=\"margin-top:.75rem; display:grid; gap:8px;\">\n          ${g.items.map(item => `\n            <div class=\"order-item-card\">\n              <div class=\"order-item__left\">\n                <span class=\"badge badge--name\" title=\"${escapeHTML(item.productName)}\">${escapeHTML(item.productName)}</span>\n              </div>\n              <div class=\"order-item__right\">\n                <span class=\"badge badge--qty\">Qty: ${Number(item.quantity)||0}</span>\n                <span class=\"badge\" style=\"background:#F3F4F6; color:#374151; border-color:#E5E7EB;\">${escapeHTML(item.status)}</span>\n              </div>\n            </div>\n          `).join('')}\n        </div>\n      `;\n      frag.appendChild(card);\n    });\n\n    listDiv.appendChild(frag);\n    if (window.feather) feather.replace();\n\n    listDiv.querySelectorAll('.assign-btn').forEach(btn => {\n      btn.addEventListener('click', () => {\n        const key = btn.dataset.key;\n        const g = groups.find(x => x.key === key);\n        if (!g) return;\n        selectedGroup = { key, orderIds: g.items.map(x => x.id), items: g.items };\n        openAssignModal(g);\n      });\n    });\n  }\n\n  function filterAndRender() {\n    const q = norm(searchInput?.value || '');\n    const base = groupOrders(allItems);\n    groups = q ? base.filter(g => norm(g.reason).includes(q) || norm(g.createdByName).includes(q)) : base;\n    render();\n  }\n\n  async function loadTeamMembers() {\n    const r = await fetch('/api/team-members', { credentials: 'same-origin', cache: 'no-store' });\n    if (!r.ok) throw new Error('Failed to load team members');\n    teamMembers = await r.json();\n  }\n\n  async function loadRequested() {\n    try {\n      const r = await fetch('/api/orders/requested', { credentials: 'same-origin', cache: 'no-store' });\n      if (r.status === 401) { location.href = '/login'; return; }\n      if (!r.ok) throw new Error('Failed to fetch requested orders');\n      const data = await r.json();\n      allItems = Array.isArray(data) ? data : [];\n      groups = groupOrders(allItems);\n      render();\n    } catch (e) {\n      console.error(e);\n      listDiv.innerHTML = `<p style=\"color:#B91C1C;\">Error: ${e.message}</p>`;\n    }\n  }\n\n  function buildSelectOptions(group) {\n    // بناخد أعضاء الفريق\n    assignSelect.innerHTML = teamMembers.map(m => `<option value=\"${m.id}\">${escapeHTML(m.name)}</option>`).join('');\n    // Remove any placeholder option that might appear in the dropdown list\n    Array.from(assignSelect.options).forEach(o => {\n      if (!o.value || /choose\\s*member/i.test(o.textContent || '')) o.remove();\n    });\n\n    assignSelect.multiple = true; assignSelect.size = Math.min(6, teamMembers.length || 6);\n\n    // لو كل عناصر الجروب متعيّنة لنفس الشخص، نختاره تلقائيًا\n    const names = new Set((group.items || []).map(i => i.assignedToName || '').filter(Boolean));\n    if (names.size === 1) {\n      const name = Array.from(names)[0];\n      const m = teamMembers.find(x => x.name === name);\n      if (m) assignSelect.value = m.id;\n    }\n  }\n\n  function enhanceSelect() {\n    try {\n      if (choiceInst && typeof choiceInst.destroy === 'function') {\n        choiceInst.destroy();\n        choiceInst = null;\n      }\n      if (window.Choices) {\n        choiceInst = new Choices(assignSelect, {\n          searchEnabled: true,\n          itemSelectText: '',\n          shouldSort: true,\n          position: 'bottom',\n          removeItemButton: false,\n          placeholder: true,\n          placeholderValue: 'Choose member...'\n        });\n      }\n    } catch {}\n  }\n\n  // احصل على القيمة المختارة بطريقة مضمونة (سواء Choices أو select عادي)\n  function getSelectedMemberIds() {\n    return Array.from(assignSelect?.selectedOptions || []).map(o => o.value).filter(Boolean);\n  }\n\n  function getSelectedMemberId() {\n    let val = '';\n    try {\n      if (choiceInst && typeof choiceInst.getValue === 'function') {\n        const v = choiceInst.getValue(true); // returns value or array of values\n        if (Array.isArray(v)) val = v[0] || '';\n        else val = v || '';\n      }\n    } catch {}\n    if (!val) val = assignSelect.value || '';\n    return String(val).trim();\n  }\n\n  function openAssignModal(group) {\n    if (!assignModal) return;\n    buildSelectOptions(group);\n    enhanceSelect();\n    assignModal.style.display = 'flex';\n    if (window.feather) feather.replace();\n  }\n  function closeAssignModal(){ \n    assignModal.style.display = 'none';\n    // سيب الاختيار كما هو للمرة الجاية (لو حابب نعمل reset: assignSelect.value = '';)\n  }\n\n  async function applyAssign(e) {\n    e?.preventDefault?.();\n    const memberIds = getSelectedMemberIds();\n    if (!selectedGroup || !memberIds.length) {\n      alert('Please choose a member.');\n      return;\n    }\n    assignApply.disabled = true; assignApply.textContent = 'Assigning...';\n    try {\n      const res = await fetch('/api/orders/assign', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        credentials: 'same-origin',\n        body: JSON.stringify({ orderIds: selectedGroup.orderIds, memberIds })\n      });\n      const data = await res.json().catch(()=>({}));\n      if (!res.ok || data.error) throw new Error(data.error || 'Failed to assign');\n\n      // Update UI in-memory\n      const chosenList = teamMembers.filter(m => memberIds.includes(m.id));\n      if (chosenList.length) {\n        const names = chosenList.map(m=>m.name);\n        const ids = chosenList.map(m=>m.id);\n        groups.forEach(g => {\n          if (g.key !== selectedGroup.key) return;\n          g.items.forEach(it => { it.assignedToIds = ids.slice(); it.assignedToNames = names.slice(); });\n        });\n      }\n      render();\n      window.UI?.toast?.({ type:'success', title:'Assigned', message:'Order assigned successfully.' });\n      closeAssignModal();\n    } catch (e) {\n      alert(e.message || 'Failed to assign.');\n    } finally {\n      assignApply.disabled = false; assignApply.textContent = 'Assign';\n    }\n  }\n\n  // Events\n  assignClose?.addEventListener('click', closeAssignModal);\n  assignCancel?.addEventListener('click', (e)=>{ e.preventDefault(); closeAssignModal(); });\n  assignModal?.addEventListener('click', (e)=>{ if (e.target === assignModal) closeAssignModal(); });\n  assignApply?.addEventListener('click', applyAssign);\n\n  searchInput?.addEventListener('input', filterAndRender);\n  searchInput?.addEventListener('keydown', (e)=>{ if (e.key==='Escape'){ searchInput.value=''; filterAndRender(); } });\n\n  // Init\n  (async () => {\n    try { await loadTeamMembers(); } catch (e) { console.warn(e); }\n    await loadRequested();\n  })();\n});","size_bytes":10278},"public/js/script.js":{"content":"// public/js/script.js\ndocument.addEventListener('DOMContentLoaded', function () {\n  const ordersListDiv   = document.getElementById('orders-list');\n  const orderModal      = document.getElementById('orderModal');\n  const orderModalBody  = document.getElementById('orderModalBody');\n  const orderModalClose = document.getElementById('orderModalClose');\n  const searchInput     = document.getElementById('orderSearch');\n\n  const CACHE_KEY = 'ordersDataV2';\n  const CACHE_TTL_MS = 30 * 1000;\n\n  let allOrders = [];\n  let filtered  = [];\n\n  const norm = (s) => String(s || '').toLowerCase().trim();\n  const toDate = (d) => new Date(d || 0);\n  const escapeHTML = (s) => String(s).replace(/[&<>\"']/g, c => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#39;'}[c]));\n\n  function sortByNewest(list) {\n    return (list || []).slice().sort((a, b) => toDate(b.createdTime) - toDate(a.createdTime));\n  }\n\n  function displayOrders(orders) {\n    if (!ordersListDiv) return;\n    ordersListDiv.innerHTML = '';\n    if (!orders || orders.length === 0) {\n      ordersListDiv.innerHTML = '<p>No orders found.</p>';\n      return;\n    }\n\n    // اجمع حسب السبب واحسب أحدث تاريخ لكل جروب\n    const map = new Map();\n    for (const o of orders) {\n      const key = o.reason || 'No Reason';\n      let g = map.get(key);\n      if (!g) {\n        g = { reason: key, latestCreated: o.createdTime, products: [] };\n        map.set(key, g);\n      }\n      g.products.push(o);\n      if (!g.latestCreated || toDate(o.createdTime) > toDate(g.latestCreated)) {\n        g.latestCreated = o.createdTime;\n      }\n    }\n\n    const groups = Array.from(map.values()).sort(\n      (a, b) => toDate(b.latestCreated) - toDate(a.latestCreated)\n    );\n\n    const frag = document.createDocumentFragment();\n    groups.forEach(group => {\n      const card = document.createElement('div');\n      card.className = 'order-card';\n      const createdTime = new Date(group.latestCreated).toLocaleString('en-US', {\n        year: 'numeric', month: 'short', day: 'numeric', hour: '2-digit', minute: '2-digit'\n      });\n      card.innerHTML = `<h3>${escapeHTML(group.reason)}</h3><p class=\"order-time\">Created: ${createdTime}</p>`;\n      card.addEventListener('click', () => openOrderModal(group));\n      frag.appendChild(card);\n    });\n    ordersListDiv.appendChild(frag);\n  }\n\n  async function fetchAndDisplayOrders() {\n    if (!ordersListDiv) return;\n\n    try {\n      const cached = sessionStorage.getItem(CACHE_KEY);\n      if (cached) {\n        const parsed = JSON.parse(cached);\n        if (parsed && Array.isArray(parsed.data) && (Date.now() - (parsed.ts || 0) < CACHE_TTL_MS)) {\n          allOrders = sortByNewest(parsed.data);\n          filtered  = allOrders.slice();\n          displayOrders(filtered);\n          return;\n        } else {\n          sessionStorage.removeItem(CACHE_KEY);\n        }\n      }\n    } catch {}\n\n    try {\n      const response = await fetch('/api/orders', { credentials: 'include', cache: 'no-store' });\n      if (response.status === 401) { window.location.href = '/login'; return; }\n      if (!response.ok) {\n        const err = await response.json().catch(() => ({}));\n        throw new Error(err.error || 'Failed to fetch orders');\n      }\n      const data = await response.json();\n      allOrders = sortByNewest(Array.isArray(data) ? data : []);\n      filtered  = allOrders.slice();\n      sessionStorage.setItem(CACHE_KEY, JSON.stringify({ ts: Date.now(), data: allOrders }));\n      displayOrders(filtered);\n    } catch (error) {\n      console.error('Error fetching orders:', error);\n      ordersListDiv.innerHTML = `<p style=\"color: red;\">Error: ${error.message}</p>`;\n    }\n  }\n\n  // مودال احترافي لعناصر الأوردر\n  function openOrderModal(orderGroup) {\n    if (!orderModalBody || !orderModal) return;\n\n    orderModalBody.innerHTML = `\n      <div class=\"order-modal__head\">\n        <div class=\"order-modal__title\">\n          <i data-feather=\"clipboard\"></i>\n          <span>${escapeHTML(orderGroup.reason)}</span>\n        </div>\n      </div>\n      <div class=\"order-modal__list\" id=\"orderModalList\"></div>\n    `;\n\n    // انقل زرار X جوّه الهيدر علشان يتمركز رأسيًا\n    const headEl = orderModalBody.querySelector('.order-modal__head');\n    if (headEl && orderModalClose) {\n      orderModalClose.classList.add('close-btn--in-head');\n      headEl.appendChild(orderModalClose); // نقل العنصر داخل الهيدر\n    }\n\n    const list = document.getElementById('orderModalList');\n\n    orderGroup.products.forEach(product => {\n      const item = document.createElement('div');\n      item.className = 'order-item-card';\n      item.innerHTML = `\n        <div class=\"order-item__left\">\n          <span class=\"badge badge--name\" title=\"${escapeHTML(product.productName)}\">${escapeHTML(product.productName)}</span>\n        </div>\n        <div class=\"order-item__right\">\n          <span class=\"badge badge--qty\">Qty: ${Number(product.quantity) || 0}</span>\n          <button class=\"receive-btn ${product.status === 'Received' ? 'received' : ''}\"\n                  data-order-id=\"${product.id}\"\n                  ${product.status === 'Received' ? 'disabled' : ''}>\n            ${product.status === 'Received' ? 'Received' : 'Mark as Received'}\n          </button>\n        </div>\n      `;\n      item.querySelector('.receive-btn').addEventListener('click', markAsReceived);\n      list.appendChild(item);\n    });\n\n    orderModal.style.display = 'flex';\n    if (window.feather) feather.replace();\n  }\n\n  function closeOrderModal() {\n    if (!orderModal) return;\n    orderModal.style.display = 'none';\n    // امسح الكاش علشان نرجّع نحمّل أحدث بيانات\n    sessionStorage.removeItem(CACHE_KEY);\n    fetchAndDisplayOrders();\n  }\n\n  async function markAsReceived(event) {\n    event.stopPropagation();\n    const button = event.target;\n    const orderPageId = button.dataset.orderId;\n    if (!orderPageId || button.disabled) return;\n\n    button.disabled = true;\n    button.textContent = 'Updating...';\n    try {\n      const response = await fetch('/api/update-received', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ orderPageId }),\n        credentials: 'include',\n      });\n      const result = await response.json();\n      if (!result.success) throw new Error(result.error || 'Server error');\n      button.textContent = 'Received';\n      button.classList.add('received');\n    } catch (error) {\n      console.error('Failed to update status:', error);\n      alert('Failed to update status. Please try again.');\n      button.textContent = 'Mark as Received';\n      button.disabled = false;\n    }\n  }\n\n  function setupSearch() {\n    if (!searchInput) return;\n    function runFilter() {\n      const q = norm(searchInput.value);\n      const base = allOrders;\n      filtered = q\n        ? base.filter(o =>\n            norm(o.reason).includes(q) ||\n            norm(o.productName).includes(q)\n          )\n        : base.slice();\n      displayOrders(filtered);\n    }\n    searchInput.addEventListener('input', runFilter);\n    searchInput.addEventListener('keydown', (e) => {\n      if (e.key === 'Escape' && searchInput.value) {\n        searchInput.value = ''; runFilter();\n      }\n    });\n  }\n\n  if (ordersListDiv) {\n    fetchAndDisplayOrders();\n    setupSearch();\n\n    if (orderModal && orderModalClose) {\n      orderModalClose.addEventListener('click', closeOrderModal);\n      orderModal.addEventListener('click', (e) => { if (e.target === orderModal) closeOrderModal(); });\n      document.addEventListener('keydown', (e) => { if (e.key === 'Escape') closeOrderModal(); });\n    }\n  }\n});","size_bytes":7743},"public/js/stocktaking.js":{"content":"document.addEventListener('DOMContentLoaded', function() {\n  const groupsContainer = document.getElementById('stock-groups');\n  const searchInput     = document.getElementById('stockSearch');\n\n  let allStock = [];\n\n  const norm = (s) => String(s || '').toLowerCase().trim();\n\n  // ألوان Notion للـ select\n  const colorVars = (color = 'default') => {\n    switch (color) {\n      case 'gray':   return { bg:'#F3F4F6', text:'#374151', border:'#E5E7EB' };\n      case 'brown':  return { bg:'#EFEBE9', text:'#4E342E', border:'#D7CCC8' };\n      case 'orange': return { bg:'#FFF7ED', text:'#9A3412', border:'#FED7AA' };\n      case 'yellow': return { bg:'#FEFCE8', text:'#854D0E', border:'#FDE68A' };\n      case 'green':  return { bg:'#ECFDF5', text:'#065F46', border:'#A7F3D0' };\n      case 'blue':   return { bg:'#EFF6FF', text:'#1E40AF', border:'#BFDBFE' };\n      case 'purple': return { bg:'#F5F3FF', text:'#5B21B6', border:'#DDD6FE' };\n      case 'pink':   return { bg:'#FDF2F8', text:'#9D174D', border:'#FBCFE8' };\n      case 'red':    return { bg:'#FEF2F2', text:'#991B1B', border:'#FECACA' };\n      default:       return { bg:'#F3F4F6', text:'#111827', border:'#E5E7EB' };\n    }\n  };\n\n  const makeTagPill = (tag) => {\n    const span = document.createElement('span');\n    const color = (tag && tag.color) || 'default';\n    span.className = `tag-pill tag--${color}`;\n    span.textContent = (tag && tag.name) || 'Untagged';\n    span.title = (tag && tag.name) || 'Untagged';\n    return span;\n  };\n\n  const makeQtyPill = (value) => {\n    const span = document.createElement('span');\n    span.className = 'qty-pill';\n    const shown =\n      typeof value === 'number' && Number.isFinite(value) ? value : '—';\n    span.textContent = String(shown);\n    return span;\n  };\n\n  const groupByTag = (rows) => {\n    const map = new Map();\n    rows.forEach(item => {\n      const name  = item?.tag?.name || 'Untagged';\n      const color = item?.tag?.color || 'default';\n      const key = `${name.toLowerCase()}|${color}`;\n      if (!map.has(key)) map.set(key, { name, color, items: [] });\n      map.get(key).items.push(item);\n    });\n\n    // ترتيب أبجدي وUntagged في الآخر\n    let arr = Array.from(map.values()).sort((a,b) => a.name.localeCompare(b.name));\n    const untagged = arr.filter(g => g.name.toLowerCase() === 'untagged' || g.name === '-');\n    arr = arr.filter(g => !(g.name.toLowerCase() === 'untagged' || g.name === '-'));\n    return arr.concat(untagged);\n  };\n\n  const renderGroups = (rows) => {\n    groupsContainer.innerHTML = '';\n\n    if (!rows || rows.length === 0) {\n      const empty = document.createElement('div');\n      empty.className = 'empty-block';\n      empty.textContent = 'No results found.';\n      groupsContainer.appendChild(empty);\n      return;\n    }\n\n    const groups = groupByTag(rows);\n    const frag = document.createDocumentFragment();\n\n    groups.forEach(group => {\n      const card = document.createElement('section');\n      card.className = 'card card--elevated group-card';\n\n      const cv = colorVars(group.color);\n      card.style.setProperty('--group-accent-bg', cv.bg);\n      card.style.setProperty('--group-accent-text', cv.text);\n      card.style.setProperty('--group-accent-border', cv.border);\n\n      // Header: Tag فقط هنا\n      const head = document.createElement('div');\n      head.className = 'group-card__head';\n      head.innerHTML = `\n        <div class=\"group-head-left\">\n          <span class=\"group-title\">Tag</span>\n          <span class=\"group-tag\">${makeTagPill(group).outerHTML}</span>\n        </div>\n        <div class=\"group-head-right\">\n          <span class=\"group-count\">${group.items.length} items</span>\n        </div>\n      `;\n\n      // Table\n      const tableWrap = document.createElement('div');\n      tableWrap.className = 'group-table-wrap';\n\n      const table = document.createElement('table');\n      table.className = 'group-table';\n\n      const thead = document.createElement('thead');\n      thead.innerHTML = `\n        <tr>\n          <th>Component</th>\n          <th class=\"col-kit\">One Kit Quantity</th>\n          <th class=\"col-num\">In Stock</th>\n        </tr>\n      `;\n\n      const tbody = document.createElement('tbody');\n      group.items\n        .sort((a,b) => (a.name || '').localeCompare(b.name || ''))\n        .forEach(item => {\n          const tr = document.createElement('tr');\n\n          const tdName = document.createElement('td');\n          tdName.textContent = item.name || '-';\n          tdName.style.fontWeight = '600';\n\n          const tdKit = document.createElement('td');\n          tdKit.className = 'col-kit';\n          tdKit.appendChild(makeQtyPill(item.oneKitQuantity));\n\n          const tdQty = document.createElement('td');\n          tdQty.className = 'col-num';\n          tdQty.textContent = (item.quantity ?? 0).toString();\n\n          tr.appendChild(tdName);\n          tr.appendChild(tdKit);\n          tr.appendChild(tdQty);\n          tbody.appendChild(tr);\n        });\n\n      table.appendChild(thead);\n      table.appendChild(tbody);\n      tableWrap.appendChild(table);\n\n      card.appendChild(head);\n      card.appendChild(tableWrap);\n      frag.appendChild(card);\n    });\n\n    groupsContainer.appendChild(frag);\n    if (window.feather) feather.replace();\n  };\n\n  const applyFilter = () => {\n    const q = norm(searchInput ? searchInput.value : '');\n    if (!q) { renderGroups(allStock); return; }\n    const filtered = allStock.filter(x => {\n      const name = norm(x.name);\n      const tag  = norm(x.tag?.name);\n      return name.includes(q) || tag.includes(q);\n    });\n    renderGroups(filtered);\n  };\n\n  const fetchStockData = async () => {\n    groupsContainer.innerHTML = `\n      <div class=\"loading-block\">\n        <i data-feather=\"loader\" class=\"loading-icon\"></i> Loading stock data...\n      </div>\n    `;\n    try {\n      const response = await fetch('/api/stock', { credentials: 'include' });\n      if (response.status === 401 || response.redirected) {\n        window.location.href = '/login';\n        return;\n      }\n      if (!response.ok) {\n        const err = await response.json().catch(() => ({}));\n        throw new Error(err.error || 'Failed to fetch stock data');\n      }\n      const data = await response.json();\n      // متوقع: [{ id, name, quantity, oneKitQuantity, tag }]\n      allStock = Array.isArray(data) ? data : [];\n      renderGroups(allStock);\n    } catch (error) {\n      console.error('Error fetching stock data:', error);\n      groupsContainer.innerHTML = `<div class=\"error-block\">Error: ${error.message}</div>`;\n    }\n  };\n\n  fetchStockData();\n\n  if (searchInput) {\n    searchInput.addEventListener('input', applyFilter);\n    searchInput.addEventListener('keydown', (e) => {\n      if (e.key === 'Escape' && searchInput.value) {\n        searchInput.value = '';\n        applyFilter();\n      }\n    });\n  }\n});\n// Download PDF button\ndocument.addEventListener('DOMContentLoaded', () => {\n  const btn = document.getElementById('downloadPdfBtn');\n  if (!btn) return;\n  btn.addEventListener('click', (e) => {\n    e.preventDefault();\n    btn.disabled = true;\n    btn.classList.add('is-busy');\n    // هنفتح الرابط مباشرة، الهيدر هيجبر التحميل\n    const link = document.createElement('a');\n    link.href = '/api/stock/pdf';\n    link.target = '_blank';\n    document.body.appendChild(link);\n    link.click();\n    link.remove();\n    setTimeout(() => {\n      btn.disabled = false;\n      btn.classList.remove('is-busy');\n    }, 1200);\n  });\n});","size_bytes":7525}},"version":1}